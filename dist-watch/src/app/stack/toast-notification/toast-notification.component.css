.toast-notification-container{position:fixed;top:3em;right:4.16667em;z-index:10;width:630px}.toast-notification-container .toast-notification-wrapper{width:100%}.toast-notification-container .toast-notification-wrapper .toast-wrapper a{margin-left:20px}

/*# sourceMappingURL=data:application/json;charset=utf8;base64,{"version":3,"file":"stack/toast-notification/toast-notification.component.css","sources":["stack/toast-notification/toast-notification.component.scss","../assets/stylesheets/_base.scss","../assets/stylesheets/shared/_variables.scss","../assets/stylesheets/shared/_custom-variables.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/_variables.scss","../../node_modules/patternfly-sass-with-css/assets/stylesheets/patternfly/_variables.scss","../../node_modules/patternfly-sass-with-css/assets/stylesheets/patternfly/_color-variables.scss","../assets/stylesheets/shared/_custom-mixins.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/_mixins.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_hide-text.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_opacity.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_image.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_labels.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_reset-filter.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_resize.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_responsive-visibility.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_size.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_tab-focus.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_reset-text.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_text-emphasis.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_text-overflow.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_vendor-prefixes.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_alerts.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_buttons.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_panels.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_pagination.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_list-group.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_nav-divider.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_forms.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_progress-bar.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_table-row.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_background-variant.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_border-radius.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_gradients.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_clearfix.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_center-block.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_nav-vertical-align.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_grid-framework.scss","../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/_grid.scss","../../node_modules/patternfly-sass-with-css/assets/stylesheets/patternfly/_mixins.scss","../../node_modules/patternfly-sass-with-css/assets/stylesheets/patternfly/_mixin_overrides.scss"],"sourcesContent":["@import '../../../assets/stylesheets/base';\n\n//Toast notification style\n.toast-notification-container {\n  position: fixed;\n  top: em(36);\n  right: em(50);\n  z-index: 10;\n  width: 630px;\n  .toast-notification-wrapper {\n    width: $width100;\n    .toast-wrapper a {\n      margin-left: 20px;\n    }\n  }\n}\n\n","@import 'shared/variables';\n@import 'shared/custom-variables';\n@import 'shared/custom-mixins';\n","$font-path: '~patternfly-sass-with-css/assets/fonts/patternfly/';\n$img-path: '~patternfly-sass-with-css/assets/images/patternfly/';\n$fa-font-path: $font-path;\n$icon-font-path: $font-path;\n","@import 'bootstrap/variables';\n@import 'patternfly/variables';\n\n//custom variables\n$width100: 100%;\n$em-base-font-size: 12;\n$rem-base-font-size: 10;\n// positions\n$textLeft: left;\n$textRight: right;\n$textCenter: center;\n$color-pf-white: #FFF;\n$color-pf-dark: #363636;\n$pf-icon-2x: 2em;\n$pf-icon-3x: 3em;\n$pf-icon-4x: 4em;\n","$bootstrap-sass-asset-helper: false !default;\n//\n// Variables\n// --------------------------------------------------\n\n\n//== Colors\n//\n//## Gray and brand colors for use across Bootstrap.\n\n$gray-base:              #000 !default;\n$gray-darker:            lighten($gray-base, 13.5%) !default; // #222\n$gray-dark:              lighten($gray-base, 20%) !default;   // #333\n$gray:                   lighten($gray-base, 33.5%) !default; // #555\n$gray-light:             lighten($gray-base, 46.7%) !default; // #777\n$gray-lighter:           lighten($gray-base, 93.5%) !default; // #eee\n\n$brand-primary:         darken(#428bca, 6.5%) !default; // #337ab7\n$brand-success:         #5cb85c !default;\n$brand-info:            #5bc0de !default;\n$brand-warning:         #f0ad4e !default;\n$brand-danger:          #d9534f !default;\n\n\n//== Scaffolding\n//\n//## Settings for some of the most global styles.\n\n//** Background color for `<body>`.\n$body-bg:               #fff !default;\n//** Global text color on `<body>`.\n$text-color:            $gray-dark !default;\n\n//** Global textual link color.\n$link-color:            $brand-primary !default;\n//** Link hover color set via `darken()` function.\n$link-hover-color:      darken($link-color, 15%) !default;\n//** Link hover decoration.\n$link-hover-decoration: underline !default;\n\n\n//== Typography\n//\n//## Font, line-height, and color for body text, headings, and more.\n\n$font-family-sans-serif:  \"Helvetica Neue\", Helvetica, Arial, sans-serif !default;\n$font-family-serif:       Georgia, \"Times New Roman\", Times, serif !default;\n//** Default monospace fonts for `<code>`, `<kbd>`, and `<pre>`.\n$font-family-monospace:   Menlo, Monaco, Consolas, \"Courier New\", monospace !default;\n$font-family-base:        $font-family-sans-serif !default;\n\n$font-size-base:          14px !default;\n$font-size-large:         ceil(($font-size-base * 1.25)) !default; // ~18px\n$font-size-small:         ceil(($font-size-base * 0.85)) !default; // ~12px\n\n$font-size-h1:            floor(($font-size-base * 2.6)) !default; // ~36px\n$font-size-h2:            floor(($font-size-base * 2.15)) !default; // ~30px\n$font-size-h3:            ceil(($font-size-base * 1.7)) !default; // ~24px\n$font-size-h4:            ceil(($font-size-base * 1.25)) !default; // ~18px\n$font-size-h5:            $font-size-base !default;\n$font-size-h6:            ceil(($font-size-base * 0.85)) !default; // ~12px\n\n//** Unit-less `line-height` for use in components like buttons.\n$line-height-base:        1.428571429 !default; // 20/14\n//** Computed \"line-height\" (`font-size` * `line-height`) for use with `margin`, `padding`, etc.\n$line-height-computed:    floor(($font-size-base * $line-height-base)) !default; // ~20px\n\n//** By default, this inherits from the `<body>`.\n$headings-font-family:    inherit !default;\n$headings-font-weight:    500 !default;\n$headings-line-height:    1.1 !default;\n$headings-color:          inherit !default;\n\n\n//== Iconography\n//\n//## Specify custom location and filename of the included Glyphicons icon font. Useful for those including Bootstrap via Bower.\n\n//** Load fonts from this directory.\n\n// [converter] If $bootstrap-sass-asset-helper if used, provide path relative to the assets load path.\n// [converter] This is because some asset helpers, such as Sprockets, do not work with file-relative paths.\n$icon-font-path: if($bootstrap-sass-asset-helper, \"bootstrap/\", \"../fonts/bootstrap/\") !default;\n\n//** File name for all font files.\n$icon-font-name:          \"glyphicons-halflings-regular\" !default;\n//** Element ID within SVG icon file.\n$icon-font-svg-id:        \"glyphicons_halflingsregular\" !default;\n\n\n//== Components\n//\n//## Define common padding and border radius sizes and more. Values based on 14px text and 1.428 line-height (~20px to start).\n\n$padding-base-vertical:     6px !default;\n$padding-base-horizontal:   12px !default;\n\n$padding-large-vertical:    10px !default;\n$padding-large-horizontal:  16px !default;\n\n$padding-small-vertical:    5px !default;\n$padding-small-horizontal:  10px !default;\n\n$padding-xs-vertical:       1px !default;\n$padding-xs-horizontal:     5px !default;\n\n$line-height-large:         1.3333333 !default; // extra decimals for Win 8.1 Chrome\n$line-height-small:         1.5 !default;\n\n$border-radius-base:        4px !default;\n$border-radius-large:       6px !default;\n$border-radius-small:       3px !default;\n\n//** Global color for active items (e.g., navs or dropdowns).\n$component-active-color:    #fff !default;\n//** Global background color for active items (e.g., navs or dropdowns).\n$component-active-bg:       $brand-primary !default;\n\n//** Width of the `border` for generating carets that indicate dropdowns.\n$caret-width-base:          4px !default;\n//** Carets increase slightly in size for larger components.\n$caret-width-large:         5px !default;\n\n\n//== Tables\n//\n//## Customizes the `.table` component with basic values, each used across all table variations.\n\n//** Padding for `<th>`s and `<td>`s.\n$table-cell-padding:            8px !default;\n//** Padding for cells in `.table-condensed`.\n$table-condensed-cell-padding:  5px !default;\n\n//** Default background color used for all tables.\n$table-bg:                      transparent !default;\n//** Background color used for `.table-striped`.\n$table-bg-accent:               #f9f9f9 !default;\n//** Background color used for `.table-hover`.\n$table-bg-hover:                #f5f5f5 !default;\n$table-bg-active:               $table-bg-hover !default;\n\n//** Border color for table and cell borders.\n$table-border-color:            #ddd !default;\n\n\n//== Buttons\n//\n//## For each of Bootstrap's buttons, define text, background and border color.\n\n$btn-font-weight:                normal !default;\n\n$btn-default-color:              #333 !default;\n$btn-default-bg:                 #fff !default;\n$btn-default-border:             #ccc !default;\n\n$btn-primary-color:              #fff !default;\n$btn-primary-bg:                 $brand-primary !default;\n$btn-primary-border:             darken($btn-primary-bg, 5%) !default;\n\n$btn-success-color:              #fff !default;\n$btn-success-bg:                 $brand-success !default;\n$btn-success-border:             darken($btn-success-bg, 5%) !default;\n\n$btn-info-color:                 #fff !default;\n$btn-info-bg:                    $brand-info !default;\n$btn-info-border:                darken($btn-info-bg, 5%) !default;\n\n$btn-warning-color:              #fff !default;\n$btn-warning-bg:                 $brand-warning !default;\n$btn-warning-border:             darken($btn-warning-bg, 5%) !default;\n\n$btn-danger-color:               #fff !default;\n$btn-danger-bg:                  $brand-danger !default;\n$btn-danger-border:              darken($btn-danger-bg, 5%) !default;\n\n$btn-link-disabled-color:        $gray-light !default;\n\n// Allows for customizing button radius independently from global border radius\n$btn-border-radius-base:         $border-radius-base !default;\n$btn-border-radius-large:        $border-radius-large !default;\n$btn-border-radius-small:        $border-radius-small !default;\n\n\n//== Forms\n//\n//##\n\n//** `<input>` background color\n$input-bg:                       #fff !default;\n//** `<input disabled>` background color\n$input-bg-disabled:              $gray-lighter !default;\n\n//** Text color for `<input>`s\n$input-color:                    $gray !default;\n//** `<input>` border color\n$input-border:                   #ccc !default;\n\n// TODO: Rename `$input-border-radius` to `$input-border-radius-base` in v4\n//** Default `.form-control` border radius\n// This has no effect on `<select>`s in some browsers, due to the limited stylability of `<select>`s in CSS.\n$input-border-radius:            $border-radius-base !default;\n//** Large `.form-control` border radius\n$input-border-radius-large:      $border-radius-large !default;\n//** Small `.form-control` border radius\n$input-border-radius-small:      $border-radius-small !default;\n\n//** Border color for inputs on focus\n$input-border-focus:             #66afe9 !default;\n\n//** Placeholder text color\n$input-color-placeholder:        #999 !default;\n\n//** Default `.form-control` height\n$input-height-base:              ($line-height-computed + ($padding-base-vertical * 2) + 2) !default;\n//** Large `.form-control` height\n$input-height-large:             (ceil($font-size-large * $line-height-large) + ($padding-large-vertical * 2) + 2) !default;\n//** Small `.form-control` height\n$input-height-small:             (floor($font-size-small * $line-height-small) + ($padding-small-vertical * 2) + 2) !default;\n\n//** `.form-group` margin\n$form-group-margin-bottom:       15px !default;\n\n$legend-color:                   $gray-dark !default;\n$legend-border-color:            #e5e5e5 !default;\n\n//** Background color for textual input addons\n$input-group-addon-bg:           $gray-lighter !default;\n//** Border color for textual input addons\n$input-group-addon-border-color: $input-border !default;\n\n//** Disabled cursor for form controls and buttons.\n$cursor-disabled:                not-allowed !default;\n\n\n//== Dropdowns\n//\n//## Dropdown menu container and contents.\n\n//** Background for the dropdown menu.\n$dropdown-bg:                    #fff !default;\n//** Dropdown menu `border-color`.\n$dropdown-border:                rgba(0,0,0,.15) !default;\n//** Dropdown menu `border-color` **for IE8**.\n$dropdown-fallback-border:       #ccc !default;\n//** Divider color for between dropdown items.\n$dropdown-divider-bg:            #e5e5e5 !default;\n\n//** Dropdown link text color.\n$dropdown-link-color:            $gray-dark !default;\n//** Hover color for dropdown links.\n$dropdown-link-hover-color:      darken($gray-dark, 5%) !default;\n//** Hover background for dropdown links.\n$dropdown-link-hover-bg:         #f5f5f5 !default;\n\n//** Active dropdown menu item text color.\n$dropdown-link-active-color:     $component-active-color !default;\n//** Active dropdown menu item background color.\n$dropdown-link-active-bg:        $component-active-bg !default;\n\n//** Disabled dropdown menu item background color.\n$dropdown-link-disabled-color:   $gray-light !default;\n\n//** Text color for headers within dropdown menus.\n$dropdown-header-color:          $gray-light !default;\n\n//** Deprecated `$dropdown-caret-color` as of v3.1.0\n$dropdown-caret-color:           #000 !default;\n\n\n//-- Z-index master list\n//\n// Warning: Avoid customizing these values. They're used for a bird's eye view\n// of components dependent on the z-axis and are designed to all work together.\n//\n// Note: These variables are not generated into the Customizer.\n\n$zindex-navbar:            1000 !default;\n$zindex-dropdown:          1000 !default;\n$zindex-popover:           1060 !default;\n$zindex-tooltip:           1070 !default;\n$zindex-navbar-fixed:      1030 !default;\n$zindex-modal-background:  1040 !default;\n$zindex-modal:             1050 !default;\n\n\n//== Media queries breakpoints\n//\n//## Define the breakpoints at which your layout will change, adapting to different screen sizes.\n\n// Extra small screen / phone\n//** Deprecated `$screen-xs` as of v3.0.1\n$screen-xs:                  480px !default;\n//** Deprecated `$screen-xs-min` as of v3.2.0\n$screen-xs-min:              $screen-xs !default;\n//** Deprecated `$screen-phone` as of v3.0.1\n$screen-phone:               $screen-xs-min !default;\n\n// Small screen / tablet\n//** Deprecated `$screen-sm` as of v3.0.1\n$screen-sm:                  768px !default;\n$screen-sm-min:              $screen-sm !default;\n//** Deprecated `$screen-tablet` as of v3.0.1\n$screen-tablet:              $screen-sm-min !default;\n\n// Medium screen / desktop\n//** Deprecated `$screen-md` as of v3.0.1\n$screen-md:                  992px !default;\n$screen-md-min:              $screen-md !default;\n//** Deprecated `$screen-desktop` as of v3.0.1\n$screen-desktop:             $screen-md-min !default;\n\n// Large screen / wide desktop\n//** Deprecated `$screen-lg` as of v3.0.1\n$screen-lg:                  1200px !default;\n$screen-lg-min:              $screen-lg !default;\n//** Deprecated `$screen-lg-desktop` as of v3.0.1\n$screen-lg-desktop:          $screen-lg-min !default;\n\n// So media queries don't overlap when required, provide a maximum\n$screen-xs-max:              ($screen-sm-min - 1) !default;\n$screen-sm-max:              ($screen-md-min - 1) !default;\n$screen-md-max:              ($screen-lg-min - 1) !default;\n\n\n//== Grid system\n//\n//## Define your custom responsive grid.\n\n//** Number of columns in the grid.\n$grid-columns:              12 !default;\n//** Padding between columns. Gets divided in half for the left and right.\n$grid-gutter-width:         30px !default;\n// Navbar collapse\n//** Point at which the navbar becomes uncollapsed.\n$grid-float-breakpoint:     $screen-sm-min !default;\n//** Point at which the navbar begins collapsing.\n$grid-float-breakpoint-max: ($grid-float-breakpoint - 1) !default;\n\n\n//== Container sizes\n//\n//## Define the maximum width of `.container` for different screen sizes.\n\n// Small screen / tablet\n$container-tablet:             (720px + $grid-gutter-width) !default;\n//** For `$screen-sm-min` and up.\n$container-sm:                 $container-tablet !default;\n\n// Medium screen / desktop\n$container-desktop:            (940px + $grid-gutter-width) !default;\n//** For `$screen-md-min` and up.\n$container-md:                 $container-desktop !default;\n\n// Large screen / wide desktop\n$container-large-desktop:      (1140px + $grid-gutter-width) !default;\n//** For `$screen-lg-min` and up.\n$container-lg:                 $container-large-desktop !default;\n\n\n//== Navbar\n//\n//##\n\n// Basics of a navbar\n$navbar-height:                    50px !default;\n$navbar-margin-bottom:             $line-height-computed !default;\n$navbar-border-radius:             $border-radius-base !default;\n$navbar-padding-horizontal:        floor(($grid-gutter-width / 2)) !default;\n$navbar-padding-vertical:          (($navbar-height - $line-height-computed) / 2) !default;\n$navbar-collapse-max-height:       340px !default;\n\n$navbar-default-color:             #777 !default;\n$navbar-default-bg:                #f8f8f8 !default;\n$navbar-default-border:            darken($navbar-default-bg, 6.5%) !default;\n\n// Navbar links\n$navbar-default-link-color:                #777 !default;\n$navbar-default-link-hover-color:          #333 !default;\n$navbar-default-link-hover-bg:             transparent !default;\n$navbar-default-link-active-color:         #555 !default;\n$navbar-default-link-active-bg:            darken($navbar-default-bg, 6.5%) !default;\n$navbar-default-link-disabled-color:       #ccc !default;\n$navbar-default-link-disabled-bg:          transparent !default;\n\n// Navbar brand label\n$navbar-default-brand-color:               $navbar-default-link-color !default;\n$navbar-default-brand-hover-color:         darken($navbar-default-brand-color, 10%) !default;\n$navbar-default-brand-hover-bg:            transparent !default;\n\n// Navbar toggle\n$navbar-default-toggle-hover-bg:           #ddd !default;\n$navbar-default-toggle-icon-bar-bg:        #888 !default;\n$navbar-default-toggle-border-color:       #ddd !default;\n\n\n//=== Inverted navbar\n// Reset inverted navbar basics\n$navbar-inverse-color:                      lighten($gray-light, 15%) !default;\n$navbar-inverse-bg:                         #222 !default;\n$navbar-inverse-border:                     darken($navbar-inverse-bg, 10%) !default;\n\n// Inverted navbar links\n$navbar-inverse-link-color:                 lighten($gray-light, 15%) !default;\n$navbar-inverse-link-hover-color:           #fff !default;\n$navbar-inverse-link-hover-bg:              transparent !default;\n$navbar-inverse-link-active-color:          $navbar-inverse-link-hover-color !default;\n$navbar-inverse-link-active-bg:             darken($navbar-inverse-bg, 10%) !default;\n$navbar-inverse-link-disabled-color:        #444 !default;\n$navbar-inverse-link-disabled-bg:           transparent !default;\n\n// Inverted navbar brand label\n$navbar-inverse-brand-color:                $navbar-inverse-link-color !default;\n$navbar-inverse-brand-hover-color:          #fff !default;\n$navbar-inverse-brand-hover-bg:             transparent !default;\n\n// Inverted navbar toggle\n$navbar-inverse-toggle-hover-bg:            #333 !default;\n$navbar-inverse-toggle-icon-bar-bg:         #fff !default;\n$navbar-inverse-toggle-border-color:        #333 !default;\n\n\n//== Navs\n//\n//##\n\n//=== Shared nav styles\n$nav-link-padding:                          10px 15px !default;\n$nav-link-hover-bg:                         $gray-lighter !default;\n\n$nav-disabled-link-color:                   $gray-light !default;\n$nav-disabled-link-hover-color:             $gray-light !default;\n\n//== Tabs\n$nav-tabs-border-color:                     #ddd !default;\n\n$nav-tabs-link-hover-border-color:          $gray-lighter !default;\n\n$nav-tabs-active-link-hover-bg:             $body-bg !default;\n$nav-tabs-active-link-hover-color:          $gray !default;\n$nav-tabs-active-link-hover-border-color:   #ddd !default;\n\n$nav-tabs-justified-link-border-color:            #ddd !default;\n$nav-tabs-justified-active-link-border-color:     $body-bg !default;\n\n//== Pills\n$nav-pills-border-radius:                   $border-radius-base !default;\n$nav-pills-active-link-hover-bg:            $component-active-bg !default;\n$nav-pills-active-link-hover-color:         $component-active-color !default;\n\n\n//== Pagination\n//\n//##\n\n$pagination-color:                     $link-color !default;\n$pagination-bg:                        #fff !default;\n$pagination-border:                    #ddd !default;\n\n$pagination-hover-color:               $link-hover-color !default;\n$pagination-hover-bg:                  $gray-lighter !default;\n$pagination-hover-border:              #ddd !default;\n\n$pagination-active-color:              #fff !default;\n$pagination-active-bg:                 $brand-primary !default;\n$pagination-active-border:             $brand-primary !default;\n\n$pagination-disabled-color:            $gray-light !default;\n$pagination-disabled-bg:               #fff !default;\n$pagination-disabled-border:           #ddd !default;\n\n\n//== Pager\n//\n//##\n\n$pager-bg:                             $pagination-bg !default;\n$pager-border:                         $pagination-border !default;\n$pager-border-radius:                  15px !default;\n\n$pager-hover-bg:                       $pagination-hover-bg !default;\n\n$pager-active-bg:                      $pagination-active-bg !default;\n$pager-active-color:                   $pagination-active-color !default;\n\n$pager-disabled-color:                 $pagination-disabled-color !default;\n\n\n//== Jumbotron\n//\n//##\n\n$jumbotron-padding:              30px !default;\n$jumbotron-color:                inherit !default;\n$jumbotron-bg:                   $gray-lighter !default;\n$jumbotron-heading-color:        inherit !default;\n$jumbotron-font-size:            ceil(($font-size-base * 1.5)) !default;\n$jumbotron-heading-font-size:    ceil(($font-size-base * 4.5)) !default;\n\n\n//== Form states and alerts\n//\n//## Define colors for form feedback states and, by default, alerts.\n\n$state-success-text:             #3c763d !default;\n$state-success-bg:               #dff0d8 !default;\n$state-success-border:           darken(adjust-hue($state-success-bg, -10), 5%) !default;\n\n$state-info-text:                #31708f !default;\n$state-info-bg:                  #d9edf7 !default;\n$state-info-border:              darken(adjust-hue($state-info-bg, -10), 7%) !default;\n\n$state-warning-text:             #8a6d3b !default;\n$state-warning-bg:               #fcf8e3 !default;\n$state-warning-border:           darken(adjust-hue($state-warning-bg, -10), 5%) !default;\n\n$state-danger-text:              #a94442 !default;\n$state-danger-bg:                #f2dede !default;\n$state-danger-border:            darken(adjust-hue($state-danger-bg, -10), 5%) !default;\n\n\n//== Tooltips\n//\n//##\n\n//** Tooltip max width\n$tooltip-max-width:           200px !default;\n//** Tooltip text color\n$tooltip-color:               #fff !default;\n//** Tooltip background color\n$tooltip-bg:                  #000 !default;\n$tooltip-opacity:             .9 !default;\n\n//** Tooltip arrow width\n$tooltip-arrow-width:         5px !default;\n//** Tooltip arrow color\n$tooltip-arrow-color:         $tooltip-bg !default;\n\n\n//== Popovers\n//\n//##\n\n//** Popover body background color\n$popover-bg:                          #fff !default;\n//** Popover maximum width\n$popover-max-width:                   276px !default;\n//** Popover border color\n$popover-border-color:                rgba(0,0,0,.2) !default;\n//** Popover fallback border color\n$popover-fallback-border-color:       #ccc !default;\n\n//** Popover title background color\n$popover-title-bg:                    darken($popover-bg, 3%) !default;\n\n//** Popover arrow width\n$popover-arrow-width:                 10px !default;\n//** Popover arrow color\n$popover-arrow-color:                 $popover-bg !default;\n\n//** Popover outer arrow width\n$popover-arrow-outer-width:           ($popover-arrow-width + 1) !default;\n//** Popover outer arrow color\n$popover-arrow-outer-color:           fade_in($popover-border-color, 0.05) !default;\n//** Popover outer arrow fallback color\n$popover-arrow-outer-fallback-color:  darken($popover-fallback-border-color, 20%) !default;\n\n\n//== Labels\n//\n//##\n\n//** Default label background color\n$label-default-bg:            $gray-light !default;\n//** Primary label background color\n$label-primary-bg:            $brand-primary !default;\n//** Success label background color\n$label-success-bg:            $brand-success !default;\n//** Info label background color\n$label-info-bg:               $brand-info !default;\n//** Warning label background color\n$label-warning-bg:            $brand-warning !default;\n//** Danger label background color\n$label-danger-bg:             $brand-danger !default;\n\n//** Default label text color\n$label-color:                 #fff !default;\n//** Default text color of a linked label\n$label-link-hover-color:      #fff !default;\n\n\n//== Modals\n//\n//##\n\n//** Padding applied to the modal body\n$modal-inner-padding:         15px !default;\n\n//** Padding applied to the modal title\n$modal-title-padding:         15px !default;\n//** Modal title line-height\n$modal-title-line-height:     $line-height-base !default;\n\n//** Background color of modal content area\n$modal-content-bg:                             #fff !default;\n//** Modal content border color\n$modal-content-border-color:                   rgba(0,0,0,.2) !default;\n//** Modal content border color **for IE8**\n$modal-content-fallback-border-color:          #999 !default;\n\n//** Modal backdrop background color\n$modal-backdrop-bg:           #000 !default;\n//** Modal backdrop opacity\n$modal-backdrop-opacity:      .5 !default;\n//** Modal header border color\n$modal-header-border-color:   #e5e5e5 !default;\n//** Modal footer border color\n$modal-footer-border-color:   $modal-header-border-color !default;\n\n$modal-lg:                    900px !default;\n$modal-md:                    600px !default;\n$modal-sm:                    300px !default;\n\n\n//== Alerts\n//\n//## Define alert colors, border radius, and padding.\n\n$alert-padding:               15px !default;\n$alert-border-radius:         $border-radius-base !default;\n$alert-link-font-weight:      bold !default;\n\n$alert-success-bg:            $state-success-bg !default;\n$alert-success-text:          $state-success-text !default;\n$alert-success-border:        $state-success-border !default;\n\n$alert-info-bg:               $state-info-bg !default;\n$alert-info-text:             $state-info-text !default;\n$alert-info-border:           $state-info-border !default;\n\n$alert-warning-bg:            $state-warning-bg !default;\n$alert-warning-text:          $state-warning-text !default;\n$alert-warning-border:        $state-warning-border !default;\n\n$alert-danger-bg:             $state-danger-bg !default;\n$alert-danger-text:           $state-danger-text !default;\n$alert-danger-border:         $state-danger-border !default;\n\n\n//== Progress bars\n//\n//##\n\n//** Background color of the whole progress component\n$progress-bg:                 #f5f5f5 !default;\n//** Progress bar text color\n$progress-bar-color:          #fff !default;\n//** Variable for setting rounded corners on progress bar.\n$progress-border-radius:      $border-radius-base !default;\n\n//** Default progress bar color\n$progress-bar-bg:             $brand-primary !default;\n//** Success progress bar color\n$progress-bar-success-bg:     $brand-success !default;\n//** Warning progress bar color\n$progress-bar-warning-bg:     $brand-warning !default;\n//** Danger progress bar color\n$progress-bar-danger-bg:      $brand-danger !default;\n//** Info progress bar color\n$progress-bar-info-bg:        $brand-info !default;\n\n\n//== List group\n//\n//##\n\n//** Background color on `.list-group-item`\n$list-group-bg:                 #fff !default;\n//** `.list-group-item` border color\n$list-group-border:             #ddd !default;\n//** List group border radius\n$list-group-border-radius:      $border-radius-base !default;\n\n//** Background color of single list items on hover\n$list-group-hover-bg:           #f5f5f5 !default;\n//** Text color of active list items\n$list-group-active-color:       $component-active-color !default;\n//** Background color of active list items\n$list-group-active-bg:          $component-active-bg !default;\n//** Border color of active list elements\n$list-group-active-border:      $list-group-active-bg !default;\n//** Text color for content within active list items\n$list-group-active-text-color:  lighten($list-group-active-bg, 40%) !default;\n\n//** Text color of disabled list items\n$list-group-disabled-color:      $gray-light !default;\n//** Background color of disabled list items\n$list-group-disabled-bg:         $gray-lighter !default;\n//** Text color for content within disabled list items\n$list-group-disabled-text-color: $list-group-disabled-color !default;\n\n$list-group-link-color:         #555 !default;\n$list-group-link-hover-color:   $list-group-link-color !default;\n$list-group-link-heading-color: #333 !default;\n\n\n//== Panels\n//\n//##\n\n$panel-bg:                    #fff !default;\n$panel-body-padding:          15px !default;\n$panel-heading-padding:       10px 15px !default;\n$panel-footer-padding:        $panel-heading-padding !default;\n$panel-border-radius:         $border-radius-base !default;\n\n//** Border color for elements within panels\n$panel-inner-border:          #ddd !default;\n$panel-footer-bg:             #f5f5f5 !default;\n\n$panel-default-text:          $gray-dark !default;\n$panel-default-border:        #ddd !default;\n$panel-default-heading-bg:    #f5f5f5 !default;\n\n$panel-primary-text:          #fff !default;\n$panel-primary-border:        $brand-primary !default;\n$panel-primary-heading-bg:    $brand-primary !default;\n\n$panel-success-text:          $state-success-text !default;\n$panel-success-border:        $state-success-border !default;\n$panel-success-heading-bg:    $state-success-bg !default;\n\n$panel-info-text:             $state-info-text !default;\n$panel-info-border:           $state-info-border !default;\n$panel-info-heading-bg:       $state-info-bg !default;\n\n$panel-warning-text:          $state-warning-text !default;\n$panel-warning-border:        $state-warning-border !default;\n$panel-warning-heading-bg:    $state-warning-bg !default;\n\n$panel-danger-text:           $state-danger-text !default;\n$panel-danger-border:         $state-danger-border !default;\n$panel-danger-heading-bg:     $state-danger-bg !default;\n\n\n//== Thumbnails\n//\n//##\n\n//** Padding around the thumbnail image\n$thumbnail-padding:           4px !default;\n//** Thumbnail background color\n$thumbnail-bg:                $body-bg !default;\n//** Thumbnail border color\n$thumbnail-border:            #ddd !default;\n//** Thumbnail border radius\n$thumbnail-border-radius:     $border-radius-base !default;\n\n//** Custom text color for thumbnail captions\n$thumbnail-caption-color:     $text-color !default;\n//** Padding around the thumbnail caption\n$thumbnail-caption-padding:   9px !default;\n\n\n//== Wells\n//\n//##\n\n$well-bg:                     #f5f5f5 !default;\n$well-border:                 darken($well-bg, 7%) !default;\n\n\n//== Badges\n//\n//##\n\n$badge-color:                 #fff !default;\n//** Linked badge text color on hover\n$badge-link-hover-color:      #fff !default;\n$badge-bg:                    $gray-light !default;\n\n//** Badge text color in active nav link\n$badge-active-color:          $link-color !default;\n//** Badge background color in active nav link\n$badge-active-bg:             #fff !default;\n\n$badge-font-weight:           bold !default;\n$badge-line-height:           1 !default;\n$badge-border-radius:         10px !default;\n\n\n//== Breadcrumbs\n//\n//##\n\n$breadcrumb-padding-vertical:   8px !default;\n$breadcrumb-padding-horizontal: 15px !default;\n//** Breadcrumb background color\n$breadcrumb-bg:                 #f5f5f5 !default;\n//** Breadcrumb text color\n$breadcrumb-color:              #ccc !default;\n//** Text color of current page in the breadcrumb\n$breadcrumb-active-color:       $gray-light !default;\n//** Textual separator for between breadcrumb elements\n$breadcrumb-separator:          \"/\" !default;\n\n\n//== Carousel\n//\n//##\n\n$carousel-text-shadow:                        0 1px 2px rgba(0,0,0,.6) !default;\n\n$carousel-control-color:                      #fff !default;\n$carousel-control-width:                      15% !default;\n$carousel-control-opacity:                    .5 !default;\n$carousel-control-font-size:                  20px !default;\n\n$carousel-indicator-active-bg:                #fff !default;\n$carousel-indicator-border-color:             #fff !default;\n\n$carousel-caption-color:                      #fff !default;\n\n\n//== Close\n//\n//##\n\n$close-font-weight:           bold !default;\n$close-color:                 #000 !default;\n$close-text-shadow:           0 1px 0 #fff !default;\n\n\n//== Code\n//\n//##\n\n$code-color:                  #c7254e !default;\n$code-bg:                     #f9f2f4 !default;\n\n$kbd-color:                   #fff !default;\n$kbd-bg:                      #333 !default;\n\n$pre-bg:                      #f5f5f5 !default;\n$pre-color:                   $gray-dark !default;\n$pre-border-color:            #ccc !default;\n$pre-scrollable-max-height:   340px !default;\n\n\n//== Type\n//\n//##\n\n//** Horizontal offset for forms and lists.\n$component-offset-horizontal: 180px !default;\n//** Text muted color\n$text-muted:                  $gray-light !default;\n//** Abbreviations and acronyms border color\n$abbr-border-color:           $gray-light !default;\n//** Headings small color\n$headings-small-color:        $gray-light !default;\n//** Blockquote small color\n$blockquote-small-color:      $gray-light !default;\n//** Blockquote font size\n$blockquote-font-size:        ($font-size-base * 1.25) !default;\n//** Blockquote border color\n$blockquote-border-color:     $gray-lighter !default;\n//** Page header border color\n$page-header-border-color:    $gray-lighter !default;\n//** Width of horizontal description list titles\n$dl-horizontal-offset:        $component-offset-horizontal !default;\n//** Point at which .dl-horizontal becomes horizontal\n$dl-horizontal-breakpoint:    $grid-float-breakpoint !default;\n//** Horizontal line color.\n$hr-border:                   $gray-lighter !default;\n","$patternfly-sass-asset-helper: false !default;\n//\n// Variables\n// --------------------------------------------------\n// Bootstrap overrides and PatternFly-specific variables\n\n// PatternFly-specific\n// -------------------\n@import \"color-variables\";\n\n$bootstrap-switch-handle-default-bg-color:                          $color-pf-black-100 !default;\n$bootstrap-treeview-highlight-color:                                $color-pf-blue-300 !default;\n$btn-default-bg-img-start:                                          $color-pf-black-100 !default;\n$btn-default-bg-img-stop:                                           $color-pf-black-200 !default;\n$btn-xs-font-weight:                                                400 !default;\n$card-pf-accented-border-top-color:                                 $color-pf-blue-300 !default;\n$card-pf-aggregate-status-title-icon-color:                         $color-pf-black-900 !default;\n$card-pf-bg-color:                                                  $color-pf-white !default;\n$card-pf-border-color:                                              $color-pf-black-300 !default;\n$card-pf-border-top-color:                                          transparent !default;\n$card-pf-container-bg-color:                                        $color-pf-black-150 !default;\n$card-pf-footer-bg-color:                                           $color-pf-black-100 !default;\n$card-pf-selected-border-color:                                     $color-pf-blue-300 !default;\n$donut-font-size-big:                                               30px !default;\n$dropdown-divider-margin:                                           4px 1px !default;\n$dropdown-link-active-border-color:                                 $color-pf-blue !default;\n$dropdown-link-hover-border-color:                                  $color-pf-blue-100 !default;\n$dropdown-link-focus-color:                                         $color-pf-white !default;\n$flyout-transition-pf:                                              all 200ms cubic-bezier(.35, 0, .25, 1) !default;\n$font-family-monospace:                                             Menlo, Monaco, Consolas, monospace !default;\n$font-path:                                                         if($patternfly-sass-asset-helper, \"patternfly\", \"../fonts/patternfly\") !default;\n$footer-pf-bg-color:                                                $color-pf-black !default;\n$footer-pf-padding-left:                                            25px !default;\n$footer-pf-padding-top:                                             10px !default;\n$footer-pf-height:                                                  37px !default;\n$gray-light-pf:                                                     $color-pf-black-400 !default;\n$gray-pf:                                                           $color-pf-black-700 !default;\n$icon-font-name-fa:                                                 \"FontAwesome\" !default;\n$icon-font-name-pf:                                                 \"PatternFlyIcons-webfont\" !default;\n$icon-prefix:                                                       pficon !default;\n$img-bg-login:                                                      \"bg-login.jpg\" !default;\n$img-path:                                                          if($patternfly-sass-asset-helper, \"patternfly\", \"../images/patternfly\") !default;\n$img-spinner:                                                       \"spinner.gif\" !default;\n$img-spinner-inverse:                                               \"spinner-inverse.gif\" !default;\n$img-spinner-inverse-lg:                                            \"spinner-inverse-lg.gif\" !default;\n$img-spinner-inverse-sm:                                            \"spinner-inverse-sm.gif\" !default;\n$img-spinner-inverse-xs:                                            \"spinner-inverse-xs.gif\" !default;\n$img-spinner-lg:                                                    \"spinner-lg.gif\" !default;\n$img-spinner-sm:                                                    \"spinner-sm.gif\" !default;\n$img-spinner-xs:                                                    \"spinner-xs.gif\" !default;\n$input-border-hover:                                                $color-pf-blue-200 !default;\n$input-border-focus:                                                $color-pf-blue-400 !default;\n$list-pf-border-color:                                              $color-pf-black-200 !default;\n$list-pf-active-border-color:                                       $color-pf-black-400 !default;\n$list-pf-header-background-color:                                   $color-pf-black-200 !default;\n$list-pf-hover-background-color:                                    $color-pf-black-100 !default;\n$list-pf-padding:                                                   20px !default;\n$list-view-accented-border:                                         $color-pf-blue-300 !default;\n$list-view-active-bg:                                               $color-pf-blue-50 !default;\n$list-view-divider:                                                 $color-pf-black-300 !default;\n$list-view-hover-bg:                                                $color-pf-black-200 !default;\n$list-group-top-border:                                             $color-pf-black-200 !default;\n$login-bg-color:                                                    $color-pf-black !default;\n$login-container-bg-color-rgba:                                     rgba($color-pf-white, 0.055) !default;\n$modal-about-pf-bg-img:                                             \"bg-modal-about-pf.png\" !default;\n$modal-title-padding-horizontal:                                    18px !default;\n$modal-title-padding-vertical:                                      10px !default;\n$navbar-pf-active-color:                                            $color-pf-black-150 !default;\n$navbar-pf-alt-active-color:                                        $color-pf-white !default;\n$navbar-pf-alt-bg-color:                                            $color-pf-black !default;\n$navbar-pf-alt-bg-img:                                              \"bg-navbar-pf-alt.svg\" !default;\n$navbar-pf-bg-color:                                                $color-pf-black !default;\n$navbar-pf-border-color:                                            $color-pf-blue-300 !default;\n$navbar-pf-color:                                                   $color-pf-black-300 !default;\n$navbar-pf-height:                                                  60px !default;\n$navbar-pf-icon-bar-bg-color:                                       $color-pf-white !default;\n$navbar-pf-navbar-navbar-brand-min-width:                           270px !default;\n$navbar-pf-navbar-navbar-brand-padding:                             8px 0 7px !default;\n$navbar-pf-navbar-navbar-persistent-bg-color:                       $color-pf-black-150 !default;\n$navbar-pf-navbar-navbar-persistent-border-color:                   $color-pf-black-300 !default;\n$navbar-pf-vertical-active-color:                                   $color-pf-white !default;\n$navbar-pf-vertical-bg-color:                                       #1d1d1d !default;\n$navbar-pf-vertical-bg-repeat:                                      no-repeat !default;\n$navbar-pf-vertical-bg-size:                                        auto 100% !default;\n$navbar-pf-vertical-border-color:                                   $color-pf-blue-300 !default;\n$navbar-pf-vertical-border-style:                                   solid !default;\n$navbar-pf-vertical-border-width:                                   2px !default;\n$navbar-pf-vertical-color:                                          $color-pf-black-300 !default;\n$navbar-pf-vertical-height:                                         60px !default;\n$navbar-pf-vertical-icon-bar-bg-color:                              $color-pf-white !default;\n$navbar-pf-vertical-navbar-brand-color:                             $color-pf-white !default;\n$navbar-pf-vertical-navbar-brand-icon-margin:                       0 15px 0 0 !default;\n$navbar-pf-vertical-navbar-brand-margin:                            0 0 0 25px !default;\n$navbar-pf-vertical-navbar-brand-min-height:                        35px !default;\n$navbar-pf-vertical-navbar-brand-name-breakpoint:                   480px !default;\n$navbar-pf-vertical-navbar-brand-name-margin:                       0 15px 0 0 !default;\n$navbar-pf-vertical-navbar-brand-padding:                           11px 0 12px !default;\n$navbar-pf-vertical-navbar-toggle-margin:                           13px 15px !default;\n$navbar-pf-vertical-navbar-toggle-icon-bar-hover-bg:                $color-pf-white !default;\n$navbar-pf-vertical-nav-item-iconic-padding:                        21px 12px !default;\n$nav-pf-container-transition-period:                                250ms !default;\n$nav-pf-menu-transition-period:                                     100ms !default;\n$nav-pf-vertical-active-color:                                      $color-pf-white !default;\n$nav-pf-vertical-active-before-color:                               $color-pf-blue-300 !default;\n$nav-pf-vertical-active-bg-color:                                   $color-pf-black-800 !default;\n$nav-pf-vertical-active-border-color:                               $color-pf-black-900 !default;\n$nav-pf-vertical-active-font-weight:                                600 !default;\n$nav-pf-vertical-active-icon-color:                                 $color-pf-blue-300 !default;\n$nav-pf-vertical-badge-color:                                       $color-pf-white !default;\n$nav-pf-vertical-badge-bg-color:                                    $color-pf-black-900 !default;\n$nav-pf-vertical-bg-color:                                          $color-pf-black-900 !default;\n$nav-pf-vertical-border-color:                                      $color-pf-black-900 !default;\n$nav-pf-vertical-collapsed-width:                                   75px !default;\n$nav-pf-vertical-color:                                             $color-pf-black-300 !default;\n$nav-pf-vertical-font-weight:                                       400 !default;\n$nav-pf-vertical-icon-color:                                        $color-pf-black-600 !default;\n$nav-pf-vertical-icon-width:                                        24px !default;\n$nav-pf-vertical-item-border-color:                                 $color-pf-black !default;\n$nav-pf-vertical-link-height:                                       63px !default;\n$nav-pf-vertical-link-padding:                                      17px 20px 17px 25px !default;\n$nav-pf-vertical-secondary-active-color:                            $color-pf-white !default;\n$nav-pf-vertical-secondary-active-bg-color:                         $color-pf-black-700 !default;\n$nav-pf-vertical-secondary-active-icon-color:                       $color-pf-blue-300 !default;\n$nav-pf-vertical-secondary-badge-color:                             $color-pf-white !default;\n$nav-pf-vertical-secondary-badge-bg-color:                          $color-pf-black-900 !default;\n$nav-pf-vertical-secondary-border-color:                            $color-pf-blue-300 !default;\n$nav-pf-vertical-secondary-color:                                   $color-pf-white !default;\n$nav-pf-vertical-secondary-header-margin:                           18px 20px 10px 20px !default;\n$nav-pf-vertical-secondary-indicator-color:                         $color-pf-black-600 !default;\n$nav-pf-vertical-secondary-indicator-padding:                       14px 0 !default;\n$nav-pf-vertical-secondary-item-color:                              $color-pf-black-300 !default;\n$nav-pf-vertical-secondary-item-padding:                            0 0 5px 0 !default;\n$nav-pf-vertical-secondary-link-height:                             63px !default;\n$nav-pf-vertical-secondary-link-padding:                            4px 0 2px 0 !default;\n$nav-pf-vertical-secondary-list-header-margin:                      30px 20px 10px 20px !default;\n$nav-pf-vertical-tertiary-active-color:                            $color-pf-white !default;\n$nav-pf-vertical-tertiary-active-bg-color:                          $color-pf-black-800 !default;\n$nav-pf-vertical-tertiary-indicator-padding:                        0 !default;\n$nav-pf-vertical-tertiary-bg-color:                                 $color-pf-black-700 !default;\n$nav-pf-vertical-tertiary-color:                                    #fff !default;\n$nav-pf-vertical-tertiary-header-margin:                            18px 20px 10px 20px !default;\n$nav-pf-vertical-tertiary-list-header-margin:                       30px 20px 10px 20px !default;\n$nav-pf-vertical-tertiary-item-padding:                             0 0 5px 0 !default;\n$nav-pf-vertical-tertiary-item-color:                               $color-pf-black-300 !default;\n$nav-pf-vertical-tertiary-link-margin:                              0 20px 0 20px !default;\n$nav-pf-vertical-tertiary-link-padding:                             4px 0 2px 0 !default;\n$nav-pf-vertical-tertiary-badge-color:                              $color-pf-white !default;\n$nav-pf-vertical-tertiary-badge-bg-color:                           $color-pf-black-900 !default;\n$nav-pf-vertical-width:                                             200px !default;\n$pagination-padding-small-vertical:                                 0 !default;\n$panel-default-border-color:                                        $color-pf-black-400 !default;\n$pficon-var-add-circle-o:                                           \"\\e61b\" !default;\n$pficon-var-middleware:                                             \"\\e917\" !default;\n$pficon-var-blueprint:                                              \"\\e915\" !default;\n$pficon-var-build:                                                  \"\\e902\" !default;\n$pficon-var-builder-image:                                          \"\\e800\" !default;\n$pficon-var-bundle:                                                 \"\\e918\" !default;\n$pficon-var-close:                                                  \"\\e60b\" !default;\n$pficon-var-cloud-security:                                         \"\\e903\" !default;\n$pficon-var-cloud-tenant:                                           \"\\e904\" !default;\n$pficon-var-cluster:                                                \"\\e620\" !default;\n$pficon-var-container-node:                                         \"\\e621\" !default;\n$pficon-var-cpu:                                                    \"\\e905\" !default;\n$pficon-var-degraded:                                               \"\\e91b\" !default;\n$pficon-var-delete:                                                 \"\\e611\" !default;\n$pficon-var-domain:                                                 \"\\e919\" !default;\n$pficon-var-edit:                                                   \"\\e60a\" !default;\n$pficon-var-enterprise:                                             \"\\e906\" !default;\n$pficon-var-error-circle-o:                                         \"\\e61d\" !default;\n$pficon-var-export:                                                 \"\\e616\" !default;\n$pficon-var-flag:                                                   \"\\e603\" !default;\n$pficon-var-flavor:                                                 \"\\e907\" !default;\n$pficon-var-folder-close:                                           \"\\e607\" !default;\n$pficon-var-folder-open:                                            \"\\e606\" !default;\n$pficon-var-help:                                                   \"\\e605\" !default;\n$pficon-var-history:                                                \"\\e617\" !default;\n$pficon-var-home:                                                   \"\\e618\" !default;\n$pficon-var-image:                                                  \"\\e61f\" !default;\n$pficon-var-import:                                                 \"\\e615\" !default;\n$pficon-var-info:                                                   \"\\e604\" !default;\n$pficon-var-kubernetes:                                             \"\\e627\" !default;\n$pficon-var-memory:                                                 \"\\e908\" !default;\n$pficon-var-network:                                                \"\\e909\" !default;\n$pficon-var-ok:                                                     \"\\e602\" !default;\n$pficon-var-openshift:                                              \"\\e626\" !default;\n$pficon-var-private:                                                \"\\e914\" !default;\n$pficon-var-print:                                                  \"\\e612\" !default;\n$pficon-var-project:                                                \"\\e622\" !default;\n$pficon-var-rebalance:                                              \"\\e91c\" !default;\n$pficon-var-regions:                                                \"\\e90a\" !default;\n$pficon-var-registry:                                               \"\\e623\" !default;\n$pficon-var-replicator:                                             \"\\e624\" !default;\n$pficon-var-repository:                                             \"\\e90b\" !default;\n$pficon-var-resource-pool:                                          \"\\e90c\" !default;\n$pficon-var-resources-almost-full:                                  \"\\e912\" !default;\n$pficon-var-resources-full:                                         \"\\e913\" !default;\n$pficon-var-restart:                                                \"\\e613\" !default;\n$pficon-var-route:                                                  \"\\e625\" !default;\n$pficon-var-running:                                                \"\\e614\" !default;\n$pficon-var-save:                                                   \"\\e601\" !default;\n$pficon-var-screen:                                                 \"\\e600\" !default;\n$pficon-var-server:                                                 \"\\e90d\" !default;\n$pficon-var-server-group:                                           \"\\e91a\" !default;\n$pficon-var-service:                                                \"\\e61e\" !default;\n$pficon-var-settings:                                               \"\\e610\" !default;\n$pficon-var-storage-domain:                                         \"\\e90e\" !default;\n$pficon-var-tenant:                                                 \"\\e916\" !default;\n$pficon-var-thumb-tack-o:                                           \"\\e609\" !default;\n$pficon-var-topology:                                               \"\\e608\" !default;\n$pficon-var-trend-down:                                             \"\\e900\" !default;\n$pficon-var-trend-up:                                               \"\\e901\" !default;\n$pficon-var-user:                                                   \"\\e60e\" !default;\n$pficon-var-users:                                                  \"\\e60f\" !default;\n$pficon-var-virtual-machine:                                        \"\\e90f\" !default;\n$pficon-var-volume:                                                 \"\\e910\" !default;\n$pficon-var-warning-triangle-o:                                     \"\\e61c\" !default;\n$pficon-var-zone:                                                   \"\\e911\" !default;\n$progress-description-label-width:                                  85px !default;\n$sidebar-pf-bg:                                                     $color-pf-black-100 !default;\n$sidebar-pf-border-color:                                           $color-pf-black-300 !default;\n$table-border-hover:                                                $color-pf-blue-200 !default;\n$table-cell-padding-bottom:                                         3px !default;\n$table-cell-padding-top:                                            2px !default;\n// Reference variables declared in block above\n$bootstrap-switch-bg-color-start:                                   $btn-default-bg-img-start !default;\n$bootstrap-switch-bg-color-stop:                                    $btn-default-bg-img-stop !default;\n$navbar-pf-navbar-header-border-color:                              lighten($navbar-pf-bg-color, 15%) !default;\n$navbar-pf-navbar-nav-active-active-bg-color:                       lighten($navbar-pf-bg-color, 8%) !default;\n$navbar-pf-navbar-nav-active-active-open-bg-color:                  lighten($navbar-pf-bg-color, 11%) !default;\n$navbar-pf-navbar-nav-active-bg-color:                              lighten($navbar-pf-bg-color, 12.5%) !default;\n$navbar-pf-navbar-primary-bg-color-start:                           lighten($navbar-pf-bg-color, 10%) !default; // #474C50\n$navbar-pf-navbar-primary-bg-color-stop:                            $navbar-pf-bg-color !default; // #383F43\n$navbar-pf-navbar-utility-border-color:                             lighten($navbar-pf-bg-color, 15.5%) !default;\n$navbar-pf-navbar-utility-color:                                    $navbar-pf-color !default;\n$navbar-pf-navbar-utility-hover-bg-color:                           lighten($navbar-pf-bg-color, 12.5%) !default;\n$nav-pf-vertical-secondary-bg-color:                                $nav-pf-vertical-active-bg-color !default;\n$nav-tabs-color:                                                    $gray-pf !default;\n// Reference variables declared in block above\n$navbar-pf-navbar-primary-context-bg-color-start:                   lighten($navbar-pf-navbar-primary-bg-color-start, 8.5%) !default;\n$navbar-pf-navbar-primary-context-bg-color-stop:                    lighten($navbar-pf-navbar-primary-bg-color-stop, 11%) !default;\n$navbar-pf-navbar-primary-hover-bg-color-start:                     lighten($navbar-pf-navbar-primary-bg-color-start, 10%) !default;\n$navbar-pf-navbar-primary-hover-bg-color-stop:                      lighten($navbar-pf-navbar-primary-bg-color-stop, 10%) !default;\n$navbar-pf-navbar-primary-hover-border-color:                       lighten($navbar-pf-navbar-header-border-color, 20%) !default;\n$navbar-pf-navbar-primary-context-border-color:                     lighten($navbar-pf-navbar-header-border-color, 8%) !default;\n$navbar-pf-navbar-primary-context-border-top-color:                 lighten($navbar-pf-navbar-header-border-color, 7%) !default;\n$navbar-pf-navbar-utility-hover-border-color:                       lighten($navbar-pf-navbar-utility-border-color, 5%) !default;\n$navbar-pf-navbar-utility-open-bg-color:                            lighten($navbar-pf-navbar-utility-hover-bg-color, 7.5%) !default;\n$navbar-pf-navbar-utility-open-border-color:                        lighten($navbar-pf-navbar-utility-hover-border-color, 5%) !default;\n// Reference variables declared in block above\n$navbar-pf-navbar-primary-active-bg-color-start:                    lighten($navbar-pf-navbar-primary-hover-bg-color-start, 5%) !default;\n$navbar-pf-navbar-primary-active-bg-color-stop:                     lighten($navbar-pf-navbar-primary-hover-bg-color-stop, 7.5%) !default;\n$navbar-pf-navbar-primary-active-border-color:                      lighten($navbar-pf-navbar-primary-hover-border-color, 5%) !default;\n$navbar-pf-navbar-primary-context-hover-bg-color-start:             lighten($navbar-pf-navbar-primary-context-bg-color-start, 5%) !default;\n$navbar-pf-navbar-primary-context-hover-bg-color-stop:              lighten($navbar-pf-navbar-primary-context-bg-color-stop, 7.5%) !default;\n$navbar-pf-navbar-primary-context-hover-border-color:               lighten($navbar-pf-navbar-primary-context-border-color, 5%) !default;\n$navbar-pf-navbar-primary-context-hover-border-top-color:           lighten($navbar-pf-navbar-primary-context-border-top-color, 6%) !default;\n// Reference variables declared in block above\n$navbar-pf-navbar-primary-context-active-bg-color-start:            lighten($navbar-pf-navbar-primary-context-hover-bg-color-start, 5%) !default;\n$navbar-pf-navbar-primary-context-active-bg-color-stop:             lighten($navbar-pf-navbar-primary-context-hover-bg-color-stop, 7.5%) !default;\n$navbar-pf-navbar-primary-context-active-border-color:              lighten($navbar-pf-navbar-primary-context-hover-border-color, 5%) !default;\n$navbar-pf-navbar-primary-context-active-border-top-color:          lighten($navbar-pf-navbar-primary-context-hover-border-top-color, 6%) !default;\n// References variable declared in block above\n$navbar-pf-navbar-primary-context-active-border-right-color:        $navbar-pf-navbar-primary-context-active-border-color !default;\n\n// Alternate navigation layout - Kept for backwards compatibility\n// --------------------------------------------------------------\n$footer-pf-alt-bg-color:                                            $footer-pf-bg-color !default;\n$footer-pf-alt-padding-left:                                        $footer-pf-padding-left !default;\n$footer-pf-alt-padding-top:                                         $footer-pf-padding-top !default;\n$footer-pf-alt-height:                                              $footer-pf-height !default;\n$img-path-alt:                                                      $img-path !default;\n$nav-pf-vertical-alt-active-color:                                  $color-pf-blue-300 !default;\n$nav-pf-vertical-alt-bg-color:                                      $color-pf-white !default;\n$nav-pf-vertical-alt-badge-color:                                   $color-pf-white !default;\n$nav-pf-vertical-alt-border-color:                                  $sidebar-pf-border-color !default;\n$nav-pf-vertical-alt-collapsed-width:                               75px !default;\n$nav-pf-vertical-alt-link-height:                                   63px !default;\n$nav-pf-vertical-alt-link-padding:                                  17px 20px 17px 25px !default;\n$nav-pf-vertical-alt-width:                                         250px !default;\n$navbar-pf-alt-bg-repeat:                                           $navbar-pf-vertical-bg-repeat !default;\n$navbar-pf-alt-bg-size:                                             $navbar-pf-vertical-bg-size !default;\n$navbar-pf-alt-border-color:                                        $navbar-pf-vertical-border-color !default;\n$navbar-pf-alt-border-style:                                        $navbar-pf-vertical-border-style !default;\n$navbar-pf-alt-border-width:                                        $navbar-pf-vertical-border-width !default;\n$navbar-pf-alt-color:                                               $navbar-pf-vertical-color !default;\n$navbar-pf-alt-height:                                              $navbar-pf-vertical-height !default;\n$navbar-pf-alt-nav-item-iconic-padding:                             $navbar-pf-vertical-nav-item-iconic-padding !default;\n$navbar-pf-alt-navbar-brand-color:                                  $navbar-pf-vertical-navbar-brand-color !default;\n$navbar-pf-alt-navbar-brand-icon-margin:                            $navbar-pf-vertical-navbar-brand-icon-margin !default;\n$navbar-pf-alt-navbar-brand-margin:                                 $navbar-pf-vertical-navbar-brand-margin !default;\n$navbar-pf-alt-navbar-brand-min-height:                             $navbar-pf-vertical-navbar-brand-min-height !default;\n$navbar-pf-alt-navbar-brand-name-breakpoint:                        $navbar-pf-vertical-navbar-brand-name-breakpoint !default;\n$navbar-pf-alt-navbar-brand-name-margin:                            $navbar-pf-vertical-navbar-brand-name-margin !default;\n$navbar-pf-alt-navbar-brand-padding:                                $navbar-pf-vertical-navbar-brand-padding !default;\n$navbar-pf-alt-navbar-toggle-margin:                                $navbar-pf-vertical-navbar-toggle-margin !default;\n$navbar-pf-alt-navbar-toggle-icon-bar-hover-bg:                     $navbar-pf-vertical-navbar-toggle-icon-bar-hover-bg !default;\n\n// Bootstrap overrides\n// -------------------\n$alert-info-border:                                                 $color-pf-black-500 !default;\n$alert-link-font-weight:                                            500 !default;\n$alert-padding:                                                     11px !default;\n$body-bg:                                                           $color-pf-white !default;\n$border-radius-base:                                                1px !default;\n$brand-danger:                                                      $color-pf-red !default;\n$brand-info:                                                        $color-pf-blue-500 !default;\n$brand-primary:                                                     $color-pf-blue-300 !default;\n$brand-success:                                                     $color-pf-green !default;\n$brand-warning:                                                     $color-pf-orange !default;\n$breadcrumb-bg:                                                     transparent !default;\n$breadcrumb-separator:                                              \"\\f105\" !default;\n$btn-danger-bg:                                                     $color-pf-red-200 !default;\n$btn-danger-border:                                                 $color-pf-red-300 !default;\n$btn-default-border:                                                $color-pf-black-400 !default;\n$btn-font-weight:                                                   600 !default;\n$btn-primary-bg:                                                    $color-pf-blue !default;\n$btn-primary-border:                                                $color-pf-blue-500 !default;\n$caret-width-base:                                                  0 !default;\n$code-bg:                                                           $color-pf-blue-50 !default;\n$dropdown-border:                                                   $color-pf-black-400 !default;\n$dropdown-divider-bg:                                               $color-pf-black-200 !default;\n$dropdown-link-active-color:                                        $color-pf-white !default;\n$dropdown-link-hover-bg:                                            $color-pf-blue-50 !default;\n$font-family-base:                                                  \"Open Sans\", Helvetica, Arial, sans-serif !default;\n$font-size-base:                                                    12px !default;\n$gray-dark:                                                         lighten($color-pf-black, 20%) !default;   // #333\n$gray-darker:                                                       lighten($color-pf-black, 13.5%) !default; // #222\n$gray-light:                                                        lighten($color-pf-black, 60%) !default;   // #999\n$gray-lighter:                                                      lighten($color-pf-black, 93.5%) !default; // #eee\n$grid-gutter-width:                                                 40px !default;\n$input-bg-disabled:                                                 $color-pf-black-150 !default;\n$input-border:                                                      $color-pf-black-400 !default;\n$line-height-base:                                                  1.66666667 !default; // 20/12\n$link-color:                                                        $color-pf-blue !default;\n$list-group-border:                                                 $color-pf-black-150 !default;\n$list-group-border-radius:                                          0 !default;\n$list-group-hover-bg:                                               $color-pf-blue-50 !default;\n$link-hover-color:                                                  $color-pf-blue-500 !default;\n$nav-tabs-border-color:                                             $color-pf-black-200 !default;\n$nav-tabs-link-hover-border-color:                                  transparent !default;\n$padding-large-horizontal:                                          10px !default;\n$padding-base-horizontal:                                           6px !default;\n$padding-base-vertical:                                             2px !default;\n$padding-large-vertical:                                            6px !default;\n$pager-border-radius:                                               0 !default;\n$pager-disabled-color:                                              $color-pf-black-500 !default;\n$pagination-bg:                                                     $color-pf-black-150 !default;\n$pagination-border:                                                 $color-pf-black-400 !default;\n$pagination-hover-bg:                                               $color-pf-black-200 !default;\n$panel-inner-border:                                                $color-pf-black-300 !default;\n$popover-arrow-color:                                               $color-pf-white !default;\n$popover-arrow-outer-color:                                         $color-pf-black-400 !default;\n$popover-border-color:                                              $color-pf-black-400 !default;\n$popover-max-width:                                                 220px !default;\n$popover-title-bg:                                                  $color-pf-black-150 !default;\n$pre-bg:                                                            $color-pf-black-100 !default;\n$progress-bg:                                                       $color-pf-black-200 !default;\n$table-bg-accent:                                                   $color-pf-black-150 !default;\n$table-bg-hover:                                                    $color-pf-blue-50 !default;\n$table-border-color:                                                $color-pf-black-300 !default;\n$table-cell-padding:                                                10px !default;\n$tooltip-arrow-width:                                               8px !default;\n$tooltip-bg:                                                        $color-pf-black-800 !default;\n$tooltip-max-width:                                                 220px !default;\n// Reference variables declared in block above\n$alert-danger-bg:                                                   lighten($color-pf-red-100, 55%) !default;\n$alert-danger-border:                                               $brand-danger !default;\n$alert-danger-text:                                                 $gray-dark !default;\n$alert-info-bg:                                                     $color-pf-black-150 !default;\n$alert-info-text:                                                   $gray-dark !default;\n$alert-success-bg:                                                  lighten($color-pf-green-100, 8%) !default;\n$alert-success-border:                                              $brand-success !default;\n$alert-success-text:                                                $gray-dark !default;\n$alert-warning-bg:                                                  lighten($color-pf-orange-100, 8%) !default;\n$alert-warning-border:                                              $brand-warning !default;\n$alert-warning-text:                                                $gray-dark !default;\n$badge-border-radius:                                               $border-radius-base !default;\n$border-radius-large:                                               $border-radius-base !default;\n$border-radius-small:                                               $border-radius-base !default;\n$breadcrumb-active-color:                                           $gray-pf !default;\n$breadcrumb-color:                                                  $gray-pf !default;\n$btn-default-bg:                                                    $gray-lighter !default;\n$btn-default-color:                                                 $gray-pf !default;\n$caret-width-large:                                                 $caret-width-base !default;\n$code-color:                                                        $color-pf-blue-600 !default;\n$dropdown-fallback-border:                                          $dropdown-border !default;\n$dropdown-link-active-bg:                                           $link-color !default;\n$dropdown-link-hover-color:                                         $gray-pf !default;\n$font-size-h1:                                                      ceil(($font-size-base * 2)) !default; // ~24px\n$font-size-h2:                                                      ceil(($font-size-base * 1.8333)) !default; // ~22px\n$font-size-h3:                                                      ceil(($font-size-base * 1.3333)) !default; // ~16px\n$font-size-h5:                                                      ceil(($font-size-base * 1.0833)) !default; // ~13px\n$font-size-large:                                                   ceil(($font-size-base * 1.1666)) !default; // ~14px\n$font-size-small:                                                   ceil(($font-size-base * .9166)) !default; // ~11px\n$input-color:                                                       $gray-dark !default;\n$nav-tabs-active-link-hover-color:                                  $link-color !default;\n$nav-tabs-justified-link-border-color:                              $nav-tabs-border-color !default;\n$nav-pf-vertical-badges-width:                                      ($nav-pf-vertical-width + 50px) !default;\n$padding-small-horizontal:                                          $padding-base-horizontal !default;\n$padding-small-vertical:                                            $padding-base-vertical !default;\n$panel-danger-border:                                               $brand-danger !default;\n$panel-danger-heading-bg:                                           $brand-danger !default;\n$panel-info-border:                                                 $brand-info !default;\n$panel-info-heading-bg:                                             $brand-info !default;\n$panel-primary-text:                                                $body-bg !default;\n$panel-success-border:                                              $brand-success !default;\n$panel-success-heading-bg:                                          $brand-success !default;\n$panel-warning-border:                                              $brand-warning !default;\n$panel-warning-heading-bg:                                          $brand-warning !default;\n$state-warning-text:                                                $brand-warning !default;\n$state-danger-text:                                                 $brand-danger !default;\n// Reference variable declared in block above\n$panel-danger-text:                                                 $panel-primary-text !default;\n$panel-info-text:                                                   $panel-primary-text !default;\n$panel-success-text:                                                $panel-primary-text !default;\n$panel-warning-text:                                                $panel-primary-text !default;\n\n// PatternFly-specific variables based on Bootstrap overides\n// ---------------------------------------------------------\n$bootstrap-switch-bg-color:                                         $btn-default-bg !default;\n$btn-danger-bg-img-start:                                           $brand-danger !default;\n$btn-danger-bg-img-stop:                                            $btn-danger-bg !default;\n$btn-primary-bg-img-start:                                          $brand-primary !default;\n$btn-primary-bg-img-stop:                                           $btn-primary-bg !default;\n$dropdown-link-focus-bg:                                            $link-color !default;\n$line-height-computed:                                              floor(($font-size-base * $line-height-base)) !default;\n$nav-pf-vertical-icon-size:                                         ($font-size-base + 8) !default;\n$notification-badge-color:                                          $brand-danger !default;\n$progress-sm:                                                       ($line-height-computed - 6) !default;\n$progress-xs:                                                       ($line-height-computed - 14) !default;\n$syntax-1:                                                          $btn-danger-bg !default;\n$syntax-2:                                                          $gray-dark !default;\n$syntax-3:                                                          $brand-success !default;\n$syntax-4:                                                          $brand-info !default;\n$tooltip-font-size:                                                 $font-size-base !default;\n","$color-pf-black-100:             #fafafa;\n$color-pf-black-150:             #f5f5f5;\n$color-pf-black-200:             #ededed;\n$color-pf-black-300:             #d1d1d1;\n$color-pf-black-400:             #bbb;\n$color-pf-black-500:             #8b8d8f;\n$color-pf-black-600:             #72767b;\n$color-pf-black-700:             #4d5258;\n$color-pf-black-800:             #393f44;\n$color-pf-black-900:             #292e34;\n$color-pf-blue-50:               #def3ff;\n$color-pf-blue-100:              #bee1f4;\n$color-pf-blue-200:              #7dc3e8;\n$color-pf-blue-300:              #39a5dc;\n$color-pf-blue-400:              #0088ce;\n$color-pf-blue-500:              #00659c;\n$color-pf-blue-600:              #004368;\n$color-pf-blue-700:              #002235;\n$color-pf-cyan-100:              #bedee1;\n$color-pf-cyan-200:              #7dbdc3;\n$color-pf-cyan-300:              #3a9ca6;\n$color-pf-cyan-400:              #007a87;\n$color-pf-cyan-500:              #005c66;\n$color-pf-cyan-600:              #003d44;\n$color-pf-cyan-700:              #001f22;\n$color-pf-gold-100:              #fbeabc;\n$color-pf-gold-200:              #f9d67a;\n$color-pf-gold-300:              #f5c12e;\n$color-pf-gold-400:              #f0ab00;\n$color-pf-gold-500:              #b58100;\n$color-pf-gold-600:              #795600;\n$color-pf-gold-700:              #3d2c00;\n$color-pf-green-100:             #cfe7cd;\n$color-pf-green-200:             #9ecf99;\n$color-pf-green-300:             #6ec664;\n$color-pf-green-400:             #3f9c35;\n$color-pf-green-500:             #2d7623;\n$color-pf-green-600:             #1e4f18;\n$color-pf-green-700:             #0f280d;\n$color-pf-light-blue-100:        #beedf9;\n$color-pf-light-blue-200:        #7cdbf3;\n$color-pf-light-blue-300:        #35caed;\n$color-pf-light-blue-400:        #00b9e4;\n$color-pf-light-blue-500:        #008bad;\n$color-pf-light-blue-600:        #005c73;\n$color-pf-light-blue-700:        #002d39;\n$color-pf-light-green-100:       #e4f5bc;\n$color-pf-light-green-200:       #c8eb79;\n$color-pf-light-green-300:       #ace12e;\n$color-pf-light-green-400:       #92d400;\n$color-pf-light-green-500:       #6ca100;\n$color-pf-light-green-600:       #486b00;\n$color-pf-light-green-700:       #253600;\n$color-pf-orange-100:            #fbdebf;\n$color-pf-orange-200:            #f7bd7f;\n$color-pf-orange-300:            #f39d3c;\n$color-pf-orange-400:            #ec7a08;\n$color-pf-orange-500:            #b35c00;\n$color-pf-orange-600:            #773d00;\n$color-pf-orange-700:            #3b1f00;\n$color-pf-purple-100:            #c7bfff;\n$color-pf-purple-200:            #a18fff;\n$color-pf-purple-300:            #8461f7;\n$color-pf-purple-400:            #703fec;\n$color-pf-purple-500:            #582fc0;\n$color-pf-purple-600:            #40199a;\n$color-pf-purple-700:            #1f0066;\n$color-pf-red-100:               #cc0000;\n$color-pf-red-200:               #a30000;\n$color-pf-red-300:               #8b0000;\n$color-pf-red-400:               #470000;\n$color-pf-red-500:               #2c0000;\n\n$color-pf-black:                 #030303;\n$color-pf-blue:                  $color-pf-blue-400;\n$color-pf-cyan:                  $color-pf-cyan-400;\n$color-pf-gold:                  $color-pf-gold-400;\n$color-pf-green:                 $color-pf-green-400;\n$color-pf-light-blue:            $color-pf-light-blue-400;\n$color-pf-light-green:           $color-pf-light-green-400;\n$color-pf-orange:                $color-pf-orange-400;\n$color-pf-purple:                $color-pf-purple-400;\n$color-pf-red:                   $color-pf-red-100;\n$color-pf-white:                 #fff;","@import 'bootstrap/mixins';\n@import 'patternfly/mixins';\n@import 'patternfly/mixin_overrides';\n\n// functions\n//convert px to em/rem\n@function em($px) {\n  @return ($px / $em-base-font-size) * 1em;\n}\n\n@function rem($px) {\n  @return ($px / $rem-base-font-size) * 1rem;\n}\n\n//custom mixins\n@mixin truncate() {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n@mixin transform($transform) {\n  -webkit-transform: $transform;\n  -moz-transform: $transform;\n  -ms-transform: $transform;\n  -o-transform: $transform;\n  transform: $transform;\n}\n\n@mixin transition($transition) {\n  -webkit-transition: $transition;\n  -moz-transition: $transition;\n  -ms-transition: $transition;\n  -o-transition: $transition;\n  transition: $transition;\n}\n\n@mixin borderRadius($radius) {\n  border-radius: $radius;\n  -o-border-radius: $radius;\n  -moz-border-radius: $radius;\n  -webkit-border-radius: $radius;\n}\n\n@mixin Border($borderwidth, $borderStyle, $borderColor) {\n    border-width: $borderwidth;\n    border-color: $borderColor;\n    border-style: $borderStyle;\n    -o-border-width: $borderwidth;\n    -o-border-color: $borderColor;\n    -o-border-style: $borderStyle;\n    -webkit-border-width: $borderwidth;\n    -webkit-border-color: $borderColor;\n    -webkit-border-style: $borderStyle;\n    -moz-border-width: $borderwidth;\n    -moz-border-color: $borderColor;\n    -moz-border-style: $borderStyle;\n}\n\n//multiline truncate\n@mixin multiline-truncate($line-height, $line-count, $bg-color) {\n    overflow: hidden;\n    position: relative;\n    line-height: $line-height;\n    max-height: $line-height * $line-count;\n    text-align: justify;\n    margin-right: -1em;\n    padding-right: 1em;\n    &:before {\n        content: '\\2026';\n        position: absolute;\n        right: 0;\n        bottom: 0;\n    }\n    &:after {\n        content: '';\n        position: absolute;\n        right: 0;\n        width: 1em;\n        height: 3em;\n        margin-top: 0;\n        background: $bg-color;\n    }\n}\n\n@mixin dib {\n    display: inline-block;\n}\n\n@mixin fill-container {\n    position: absolute;\n    margin: 0;\n    padding: 0;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    border-width: 0;\n}\n","// Mixins\n// --------------------------------------------------\n\n// Utilities\n@import \"mixins/hide-text\";\n@import \"mixins/opacity\";\n@import \"mixins/image\";\n@import \"mixins/labels\";\n@import \"mixins/reset-filter\";\n@import \"mixins/resize\";\n@import \"mixins/responsive-visibility\";\n@import \"mixins/size\";\n@import \"mixins/tab-focus\";\n@import \"mixins/reset-text\";\n@import \"mixins/text-emphasis\";\n@import \"mixins/text-overflow\";\n@import \"mixins/vendor-prefixes\";\n\n// Components\n@import \"mixins/alerts\";\n@import \"mixins/buttons\";\n@import \"mixins/panels\";\n@import \"mixins/pagination\";\n@import \"mixins/list-group\";\n@import \"mixins/nav-divider\";\n@import \"mixins/forms\";\n@import \"mixins/progress-bar\";\n@import \"mixins/table-row\";\n\n// Skins\n@import \"mixins/background-variant\";\n@import \"mixins/border-radius\";\n@import \"mixins/gradients\";\n\n// Layout\n@import \"mixins/clearfix\";\n@import \"mixins/center-block\";\n@import \"mixins/nav-vertical-align\";\n@import \"mixins/grid-framework\";\n@import \"mixins/grid\";\n","// CSS image replacement\n//\n// Heads up! v3 launched with only `.hide-text()`, but per our pattern for\n// mixins being reused as classes with the same name, this doesn't hold up. As\n// of v3.0.1 we have added `.text-hide()` and deprecated `.hide-text()`.\n//\n// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757\n\n// Deprecated as of v3.0.1 (has been removed in v4)\n@mixin hide-text() {\n  font: 0/0 a;\n  color: transparent;\n  text-shadow: none;\n  background-color: transparent;\n  border: 0;\n}\n\n// New mixin to use as of v3.0.1\n@mixin text-hide() {\n  @include hide-text;\n}\n","// Opacity\n\n@mixin opacity($opacity) {\n  opacity: $opacity;\n  // IE8 filter\n  $opacity-ie: ($opacity * 100);\n  filter: alpha(opacity=$opacity-ie);\n}\n","// Image Mixins\n// - Responsive image\n// - Retina image\n\n\n// Responsive image\n//\n// Keep images from scaling beyond the width of their parents.\n@mixin img-responsive($display: block) {\n  display: $display;\n  max-width: 100%; // Part 1: Set a maximum relative to the parent\n  height: auto; // Part 2: Scale the height according to the width, otherwise you get stretching\n}\n\n\n// Retina image\n//\n// Short retina mixin for setting background-image and -size. Note that the\n// spelling of `min--moz-device-pixel-ratio` is intentional.\n@mixin img-retina($file-1x, $file-2x, $width-1x, $height-1x) {\n  background-image: url(if($bootstrap-sass-asset-helper, twbs-image-path(\"#{$file-1x}\"), \"#{$file-1x}\"));\n\n  @media\n  only screen and (-webkit-min-device-pixel-ratio: 2),\n  only screen and (   min--moz-device-pixel-ratio: 2),\n  only screen and (     -o-min-device-pixel-ratio: 2/1),\n  only screen and (        min-device-pixel-ratio: 2),\n  only screen and (                min-resolution: 192dpi),\n  only screen and (                min-resolution: 2dppx) {\n    background-image: url(if($bootstrap-sass-asset-helper, twbs-image-path(\"#{$file-2x}\"), \"#{$file-2x}\"));\n    background-size: $width-1x $height-1x;\n  }\n}\n","// Labels\n\n@mixin label-variant($color) {\n  background-color: $color;\n\n  &[href] {\n    &:hover,\n    &:focus {\n      background-color: darken($color, 10%);\n    }\n  }\n}\n","// Reset filters for IE\n//\n// When you need to remove a gradient background, do not forget to use this to reset\n// the IE filter for IE9 and below.\n\n@mixin reset-filter() {\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);\n}\n","// Resize anything\n\n@mixin resizable($direction) {\n  resize: $direction; // Options: horizontal, vertical, both\n  overflow: auto; // Per CSS3 UI, `resize` only applies when `overflow` isn't `visible`\n}\n","// Responsive utilities\n\n//\n// More easily include all the states for responsive-utilities.less.\n// [converter] $parent hack\n@mixin responsive-visibility($parent) {\n  #{$parent} {\n    display: block !important;\n  }\n  table#{$parent}  { display: table !important; }\n  tr#{$parent}     { display: table-row !important; }\n  th#{$parent},\n  td#{$parent}     { display: table-cell !important; }\n}\n\n// [converter] $parent hack\n@mixin responsive-invisibility($parent) {\n  #{$parent} {\n    display: none !important;\n  }\n}\n","// Sizing shortcuts\n\n@mixin size($width, $height) {\n  width: $width;\n  height: $height;\n}\n\n@mixin square($size) {\n  @include size($size, $size);\n}\n","// WebKit-style focus\n\n@mixin tab-focus() {\n  // WebKit-specific. Other browsers will keep their default outline style.\n  // (Initially tried to also force default via `outline: initial`,\n  // but that seems to erroneously remove the outline in Firefox altogether.)\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\n","@mixin reset-text() {\n  font-family: $font-family-base;\n  // We deliberately do NOT reset font-size.\n  font-style: normal;\n  font-weight: normal;\n  letter-spacing: normal;\n  line-break: auto;\n  line-height: $line-height-base;\n  text-align: left; // Fallback for where `start` is not supported\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  white-space: normal;\n  word-break: normal;\n  word-spacing: normal;\n  word-wrap: normal;\n}\n","// Typography\n\n// [converter] $parent hack\n@mixin text-emphasis-variant($parent, $color) {\n  #{$parent} {\n    color: $color;\n  }\n  a#{$parent}:hover,\n  a#{$parent}:focus {\n    color: darken($color, 10%);\n  }\n}\n","// Text overflow\n// Requires inline-block or block for proper styling\n\n@mixin text-overflow() {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n","// Vendor Prefixes\n//\n// All vendor mixins are deprecated as of v3.2.0 due to the introduction of\n// Autoprefixer in our Gruntfile. They have been removed in v4.\n\n// - Animations\n// - Backface visibility\n// - Box shadow\n// - Box sizing\n// - Content columns\n// - Hyphens\n// - Placeholder text\n// - Transformations\n// - Transitions\n// - User Select\n\n\n// Animations\n@mixin animation($animation) {\n  -webkit-animation: $animation;\n       -o-animation: $animation;\n          animation: $animation;\n}\n@mixin animation-name($name) {\n  -webkit-animation-name: $name;\n          animation-name: $name;\n}\n@mixin animation-duration($duration) {\n  -webkit-animation-duration: $duration;\n          animation-duration: $duration;\n}\n@mixin animation-timing-function($timing-function) {\n  -webkit-animation-timing-function: $timing-function;\n          animation-timing-function: $timing-function;\n}\n@mixin animation-delay($delay) {\n  -webkit-animation-delay: $delay;\n          animation-delay: $delay;\n}\n@mixin animation-iteration-count($iteration-count) {\n  -webkit-animation-iteration-count: $iteration-count;\n          animation-iteration-count: $iteration-count;\n}\n@mixin animation-direction($direction) {\n  -webkit-animation-direction: $direction;\n          animation-direction: $direction;\n}\n@mixin animation-fill-mode($fill-mode) {\n  -webkit-animation-fill-mode: $fill-mode;\n          animation-fill-mode: $fill-mode;\n}\n\n// Backface visibility\n// Prevent browsers from flickering when using CSS 3D transforms.\n// Default value is `visible`, but can be changed to `hidden`\n\n@mixin backface-visibility($visibility) {\n  -webkit-backface-visibility: $visibility;\n     -moz-backface-visibility: $visibility;\n          backface-visibility: $visibility;\n}\n\n// Drop shadows\n//\n// Note: Deprecated `.box-shadow()` as of v3.1.0 since all of Bootstrap's\n// supported browsers that have box shadow capabilities now support it.\n\n@mixin box-shadow($shadow...) {\n  -webkit-box-shadow: $shadow; // iOS <4.3 & Android <4.1\n          box-shadow: $shadow;\n}\n\n// Box sizing\n@mixin box-sizing($boxmodel) {\n  -webkit-box-sizing: $boxmodel;\n     -moz-box-sizing: $boxmodel;\n          box-sizing: $boxmodel;\n}\n\n// CSS3 Content Columns\n@mixin content-columns($column-count, $column-gap: $grid-gutter-width) {\n  -webkit-column-count: $column-count;\n     -moz-column-count: $column-count;\n          column-count: $column-count;\n  -webkit-column-gap: $column-gap;\n     -moz-column-gap: $column-gap;\n          column-gap: $column-gap;\n}\n\n// Optional hyphenation\n@mixin hyphens($mode: auto) {\n  word-wrap: break-word;\n  -webkit-hyphens: $mode;\n     -moz-hyphens: $mode;\n      -ms-hyphens: $mode; // IE10+\n       -o-hyphens: $mode;\n          hyphens: $mode;\n}\n\n// Placeholder text\n@mixin placeholder($color: $input-color-placeholder) {\n  // Firefox\n  &::-moz-placeholder {\n    color: $color;\n    opacity: 1; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526\n  }\n  &:-ms-input-placeholder { color: $color; } // Internet Explorer 10+\n  &::-webkit-input-placeholder  { color: $color; } // Safari and Chrome\n}\n\n// Transformations\n@mixin scale($ratio...) {\n  -webkit-transform: scale($ratio);\n      -ms-transform: scale($ratio); // IE9 only\n       -o-transform: scale($ratio);\n          transform: scale($ratio);\n}\n\n@mixin scaleX($ratio) {\n  -webkit-transform: scaleX($ratio);\n      -ms-transform: scaleX($ratio); // IE9 only\n       -o-transform: scaleX($ratio);\n          transform: scaleX($ratio);\n}\n@mixin scaleY($ratio) {\n  -webkit-transform: scaleY($ratio);\n      -ms-transform: scaleY($ratio); // IE9 only\n       -o-transform: scaleY($ratio);\n          transform: scaleY($ratio);\n}\n@mixin skew($x, $y) {\n  -webkit-transform: skewX($x) skewY($y);\n      -ms-transform: skewX($x) skewY($y); // See https://github.com/twbs/bootstrap/issues/4885; IE9+\n       -o-transform: skewX($x) skewY($y);\n          transform: skewX($x) skewY($y);\n}\n@mixin translate($x, $y) {\n  -webkit-transform: translate($x, $y);\n      -ms-transform: translate($x, $y); // IE9 only\n       -o-transform: translate($x, $y);\n          transform: translate($x, $y);\n}\n@mixin translate3d($x, $y, $z) {\n  -webkit-transform: translate3d($x, $y, $z);\n          transform: translate3d($x, $y, $z);\n}\n@mixin rotate($degrees) {\n  -webkit-transform: rotate($degrees);\n      -ms-transform: rotate($degrees); // IE9 only\n       -o-transform: rotate($degrees);\n          transform: rotate($degrees);\n}\n@mixin rotateX($degrees) {\n  -webkit-transform: rotateX($degrees);\n      -ms-transform: rotateX($degrees); // IE9 only\n       -o-transform: rotateX($degrees);\n          transform: rotateX($degrees);\n}\n@mixin rotateY($degrees) {\n  -webkit-transform: rotateY($degrees);\n      -ms-transform: rotateY($degrees); // IE9 only\n       -o-transform: rotateY($degrees);\n          transform: rotateY($degrees);\n}\n@mixin perspective($perspective) {\n  -webkit-perspective: $perspective;\n     -moz-perspective: $perspective;\n          perspective: $perspective;\n}\n@mixin perspective-origin($perspective) {\n  -webkit-perspective-origin: $perspective;\n     -moz-perspective-origin: $perspective;\n          perspective-origin: $perspective;\n}\n@mixin transform-origin($origin) {\n  -webkit-transform-origin: $origin;\n     -moz-transform-origin: $origin;\n      -ms-transform-origin: $origin; // IE9 only\n          transform-origin: $origin;\n}\n\n\n// Transitions\n\n@mixin transition($transition...) {\n  -webkit-transition: $transition;\n       -o-transition: $transition;\n          transition: $transition;\n}\n@mixin transition-property($transition-property...) {\n  -webkit-transition-property: $transition-property;\n          transition-property: $transition-property;\n}\n@mixin transition-delay($transition-delay) {\n  -webkit-transition-delay: $transition-delay;\n          transition-delay: $transition-delay;\n}\n@mixin transition-duration($transition-duration...) {\n  -webkit-transition-duration: $transition-duration;\n          transition-duration: $transition-duration;\n}\n@mixin transition-timing-function($timing-function) {\n  -webkit-transition-timing-function: $timing-function;\n          transition-timing-function: $timing-function;\n}\n@mixin transition-transform($transition...) {\n  -webkit-transition: -webkit-transform $transition;\n     -moz-transition: -moz-transform $transition;\n       -o-transition: -o-transform $transition;\n          transition: transform $transition;\n}\n\n\n// User select\n// For selecting text on the page\n\n@mixin user-select($select) {\n  -webkit-user-select: $select;\n     -moz-user-select: $select;\n      -ms-user-select: $select; // IE10+\n          user-select: $select;\n}\n","// Alerts\n\n@mixin alert-variant($background, $border, $text-color) {\n  background-color: $background;\n  border-color: $border;\n  color: $text-color;\n\n  hr {\n    border-top-color: darken($border, 5%);\n  }\n  .alert-link {\n    color: darken($text-color, 10%);\n  }\n}\n","// Button variants\n//\n// Easily pump out default styles, as well as :hover, :focus, :active,\n// and disabled options for all buttons\n\n@mixin button-variant($color, $background, $border) {\n  color: $color;\n  background-color: $background;\n  border-color: $border;\n\n  &:focus,\n  &.focus {\n    color: $color;\n    background-color: darken($background, 10%);\n        border-color: darken($border, 25%);\n  }\n  &:hover {\n    color: $color;\n    background-color: darken($background, 10%);\n        border-color: darken($border, 12%);\n  }\n  &:active,\n  &.active,\n  .open > &.dropdown-toggle {\n    color: $color;\n    background-color: darken($background, 10%);\n        border-color: darken($border, 12%);\n\n    &:hover,\n    &:focus,\n    &.focus {\n      color: $color;\n      background-color: darken($background, 17%);\n          border-color: darken($border, 25%);\n    }\n  }\n  &:active,\n  &.active,\n  .open > &.dropdown-toggle {\n    background-image: none;\n  }\n  &.disabled,\n  &[disabled],\n  fieldset[disabled] & {\n    &:hover,\n    &:focus,\n    &.focus {\n      background-color: $background;\n          border-color: $border;\n    }\n  }\n\n  .badge {\n    color: $background;\n    background-color: $color;\n  }\n}\n\n// Button sizes\n@mixin button-size($padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {\n  padding: $padding-vertical $padding-horizontal;\n  font-size: $font-size;\n  line-height: $line-height;\n  border-radius: $border-radius;\n}\n","// Panels\n\n@mixin panel-variant($border, $heading-text-color, $heading-bg-color, $heading-border) {\n  border-color: $border;\n\n  & > .panel-heading {\n    color: $heading-text-color;\n    background-color: $heading-bg-color;\n    border-color: $heading-border;\n\n    + .panel-collapse > .panel-body {\n      border-top-color: $border;\n    }\n    .badge {\n      color: $heading-bg-color;\n      background-color: $heading-text-color;\n    }\n  }\n  & > .panel-footer {\n    + .panel-collapse > .panel-body {\n      border-bottom-color: $border;\n    }\n  }\n}\n","// Pagination\n\n@mixin pagination-size($padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {\n  > li {\n    > a,\n    > span {\n      padding: $padding-vertical $padding-horizontal;\n      font-size: $font-size;\n      line-height: $line-height;\n    }\n    &:first-child {\n      > a,\n      > span {\n        @include border-left-radius($border-radius);\n      }\n    }\n    &:last-child {\n      > a,\n      > span {\n        @include border-right-radius($border-radius);\n      }\n    }\n  }\n}\n","// List Groups\n\n@mixin list-group-item-variant($state, $background, $color) {\n  .list-group-item-#{$state} {\n    color: $color;\n    background-color: $background;\n\n    // [converter] extracted a&, button& to a.list-group-item-#{$state}, button.list-group-item-#{$state}\n  }\n\n  a.list-group-item-#{$state},\n  button.list-group-item-#{$state} {\n    color: $color;\n\n    .list-group-item-heading {\n      color: inherit;\n    }\n\n    &:hover,\n    &:focus {\n      color: $color;\n      background-color: darken($background, 5%);\n    }\n    &.active,\n    &.active:hover,\n    &.active:focus {\n      color: #fff;\n      background-color: $color;\n      border-color: $color;\n    }\n  }\n}\n","// Horizontal dividers\n//\n// Dividers (basically an hr) within dropdowns and nav lists\n\n@mixin nav-divider($color: #e5e5e5) {\n  height: 1px;\n  margin: (($line-height-computed / 2) - 1) 0;\n  overflow: hidden;\n  background-color: $color;\n}\n","// Form validation states\n//\n// Used in forms.less to generate the form validation CSS for warnings, errors,\n// and successes.\n\n@mixin form-control-validation($text-color: #555, $border-color: #ccc, $background-color: #f5f5f5) {\n  // Color the label and help text\n  .help-block,\n  .control-label,\n  .radio,\n  .checkbox,\n  .radio-inline,\n  .checkbox-inline,\n  &.radio label,\n  &.checkbox label,\n  &.radio-inline label,\n  &.checkbox-inline label  {\n    color: $text-color;\n  }\n  // Set the border and box shadow on specific inputs to match\n  .form-control {\n    border-color: $border-color;\n    @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work\n    &:focus {\n      border-color: darken($border-color, 10%);\n      $shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten($border-color, 20%);\n      @include box-shadow($shadow);\n    }\n  }\n  // Set validation states also for addons\n  .input-group-addon {\n    color: $text-color;\n    border-color: $border-color;\n    background-color: $background-color;\n  }\n  // Optional feedback icon\n  .form-control-feedback {\n    color: $text-color;\n  }\n}\n\n\n// Form control focus state\n//\n// Generate a customized focus state and for any input with the specified color,\n// which defaults to the `$input-border-focus` variable.\n//\n// We highly encourage you to not customize the default value, but instead use\n// this to tweak colors on an as-needed basis. This aesthetic change is based on\n// WebKit's default styles, but applicable to a wider range of browsers. Its\n// usability and accessibility should be taken into account with any change.\n//\n// Example usage: change the default blue border and shadow to white for better\n// contrast against a dark gray background.\n@mixin form-control-focus($color: $input-border-focus) {\n  $color-rgba: rgba(red($color), green($color), blue($color), .6);\n  &:focus {\n    border-color: $color;\n    outline: 0;\n    @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px $color-rgba);\n  }\n}\n\n// Form control sizing\n//\n// Relative text size, padding, and border-radii changes for form controls. For\n// horizontal sizing, wrap controls in the predefined grid classes. `<select>`\n// element gets special love because it's special, and that's a fact!\n// [converter] $parent hack\n@mixin input-size($parent, $input-height, $padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {\n  #{$parent} {\n    height: $input-height;\n    padding: $padding-vertical $padding-horizontal;\n    font-size: $font-size;\n    line-height: $line-height;\n    border-radius: $border-radius;\n  }\n\n  select#{$parent} {\n    height: $input-height;\n    line-height: $input-height;\n  }\n\n  textarea#{$parent},\n  select[multiple]#{$parent} {\n    height: auto;\n  }\n}\n","// Progress bars\n\n@mixin progress-bar-variant($color) {\n  background-color: $color;\n\n  // Deprecated parent class requirement as of v3.2.0\n  .progress-striped & {\n    @include gradient-striped;\n  }\n}\n","// Tables\n\n@mixin table-row-variant($state, $background) {\n  // Exact selectors below required to override `.table-striped` and prevent\n  // inheritance to nested tables.\n  .table > thead > tr,\n  .table > tbody > tr,\n  .table > tfoot > tr {\n    > td.#{$state},\n    > th.#{$state},\n    &.#{$state} > td,\n    &.#{$state} > th {\n      background-color: $background;\n    }\n  }\n\n  // Hover states for `.table-hover`\n  // Note: this is not available for cells or rows within `thead` or `tfoot`.\n  .table-hover > tbody > tr {\n    > td.#{$state}:hover,\n    > th.#{$state}:hover,\n    &.#{$state}:hover > td,\n    &:hover > .#{$state},\n    &.#{$state}:hover > th {\n      background-color: darken($background, 5%);\n    }\n  }\n}\n","// Contextual backgrounds\n\n// [converter] $parent hack\n@mixin bg-variant($parent, $color) {\n  #{$parent} {\n    background-color: $color;\n  }\n  a#{$parent}:hover,\n  a#{$parent}:focus {\n    background-color: darken($color, 10%);\n  }\n}\n","// Single side border-radius\n\n@mixin border-top-radius($radius) {\n  border-top-right-radius: $radius;\n   border-top-left-radius: $radius;\n}\n@mixin border-right-radius($radius) {\n  border-bottom-right-radius: $radius;\n     border-top-right-radius: $radius;\n}\n@mixin border-bottom-radius($radius) {\n  border-bottom-right-radius: $radius;\n   border-bottom-left-radius: $radius;\n}\n@mixin border-left-radius($radius) {\n  border-bottom-left-radius: $radius;\n     border-top-left-radius: $radius;\n}\n","// Gradients\n\n\n\n// Horizontal gradient, from left to right\n//\n// Creates two color stops, start and end, by specifying a color and position for each color stop.\n// Color stops are not available in IE9 and below.\n@mixin gradient-horizontal($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {\n  background-image: -webkit-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Safari 5.1-6, Chrome 10+\n  background-image: -o-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Opera 12\n  background-image: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down\n}\n\n// Vertical gradient, from top to bottom\n//\n// Creates two color stops, start and end, by specifying a color and position for each color stop.\n// Color stops are not available in IE9 and below.\n@mixin gradient-vertical($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {\n  background-image: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Safari 5.1-6, Chrome 10+\n  background-image: -o-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Opera 12\n  background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down\n}\n\n@mixin gradient-directional($start-color: #555, $end-color: #333, $deg: 45deg) {\n  background-repeat: repeat-x;\n  background-image: -webkit-linear-gradient($deg, $start-color, $end-color); // Safari 5.1-6, Chrome 10+\n  background-image: -o-linear-gradient($deg, $start-color, $end-color); // Opera 12\n  background-image: linear-gradient($deg, $start-color, $end-color); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+\n}\n@mixin gradient-horizontal-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {\n  background-image: -webkit-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);\n  background-image: -o-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);\n  background-image: linear-gradient(to right, $start-color, $mid-color $color-stop, $end-color);\n  background-repeat: no-repeat;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down, gets no color-stop at all for proper fallback\n}\n@mixin gradient-vertical-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {\n  background-image: -webkit-linear-gradient($start-color, $mid-color $color-stop, $end-color);\n  background-image: -o-linear-gradient($start-color, $mid-color $color-stop, $end-color);\n  background-image: linear-gradient($start-color, $mid-color $color-stop, $end-color);\n  background-repeat: no-repeat;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down, gets no color-stop at all for proper fallback\n}\n@mixin gradient-radial($inner-color: #555, $outer-color: #333) {\n  background-image: -webkit-radial-gradient(circle, $inner-color, $outer-color);\n  background-image: radial-gradient(circle, $inner-color, $outer-color);\n  background-repeat: no-repeat;\n}\n@mixin gradient-striped($color: rgba(255,255,255,.15), $angle: 45deg) {\n  background-image: -webkit-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);\n  background-image: -o-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);\n  background-image: linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);\n}\n","// Clearfix\n//\n// For modern browsers\n// 1. The space content is one way to avoid an Opera bug when the\n//    contenteditable attribute is included anywhere else in the document.\n//    Otherwise it causes space to appear at the top and bottom of elements\n//    that are clearfixed.\n// 2. The use of `table` rather than `block` is only necessary if using\n//    `:before` to contain the top-margins of child elements.\n//\n// Source: http://nicolasgallagher.com/micro-clearfix-hack/\n\n@mixin clearfix() {\n  &:before,\n  &:after {\n    content: \" \"; // 1\n    display: table; // 2\n  }\n  &:after {\n    clear: both;\n  }\n}\n","// Center-align a block level element\n\n@mixin center-block() {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n","// Navbar vertical align\n//\n// Vertically center elements in the navbar.\n// Example: an element has a height of 30px, so write out `.navbar-vertical-align(30px);` to calculate the appropriate top margin.\n\n@mixin navbar-vertical-align($element-height) {\n  margin-top: (($navbar-height - $element-height) / 2);\n  margin-bottom: (($navbar-height - $element-height) / 2);\n}\n","// Framework grid generation\n//\n// Used only by Bootstrap to generate the correct number of grid classes given\n// any value of `$grid-columns`.\n\n// [converter] This is defined recursively in LESS, but Sass supports real loops\n@mixin make-grid-columns($i: 1, $list: \".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}\") {\n  @for $i from (1 + 1) through $grid-columns {\n    $list: \"#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}\";\n  }\n  #{$list} {\n    position: relative;\n    // Prevent columns from collapsing when empty\n    min-height: 1px;\n    // Inner gutter via padding\n    padding-left:  ceil(($grid-gutter-width / 2));\n    padding-right: floor(($grid-gutter-width / 2));\n  }\n}\n\n\n// [converter] This is defined recursively in LESS, but Sass supports real loops\n@mixin float-grid-columns($class, $i: 1, $list: \".col-#{$class}-#{$i}\") {\n  @for $i from (1 + 1) through $grid-columns {\n    $list: \"#{$list}, .col-#{$class}-#{$i}\";\n  }\n  #{$list} {\n    float: left;\n  }\n}\n\n\n@mixin calc-grid-column($index, $class, $type) {\n  @if ($type == width) and ($index > 0) {\n    .col-#{$class}-#{$index} {\n      width: percentage(($index / $grid-columns));\n    }\n  }\n  @if ($type == push) and ($index > 0) {\n    .col-#{$class}-push-#{$index} {\n      left: percentage(($index / $grid-columns));\n    }\n  }\n  @if ($type == push) and ($index == 0) {\n    .col-#{$class}-push-0 {\n      left: auto;\n    }\n  }\n  @if ($type == pull) and ($index > 0) {\n    .col-#{$class}-pull-#{$index} {\n      right: percentage(($index / $grid-columns));\n    }\n  }\n  @if ($type == pull) and ($index == 0) {\n    .col-#{$class}-pull-0 {\n      right: auto;\n    }\n  }\n  @if ($type == offset) {\n    .col-#{$class}-offset-#{$index} {\n      margin-left: percentage(($index / $grid-columns));\n    }\n  }\n}\n\n// [converter] This is defined recursively in LESS, but Sass supports real loops\n@mixin loop-grid-columns($columns, $class, $type) {\n  @for $i from 0 through $columns {\n    @include calc-grid-column($i, $class, $type);\n  }\n}\n\n\n// Create grid for specific class\n@mixin make-grid($class) {\n  @include float-grid-columns($class);\n  @include loop-grid-columns($grid-columns, $class, width);\n  @include loop-grid-columns($grid-columns, $class, pull);\n  @include loop-grid-columns($grid-columns, $class, push);\n  @include loop-grid-columns($grid-columns, $class, offset);\n}\n","// Grid system\n//\n// Generate semantic grid columns with these mixins.\n\n// Centered container element\n@mixin container-fixed($gutter: $grid-gutter-width) {\n  margin-right: auto;\n  margin-left: auto;\n  padding-left:  floor(($gutter / 2));\n  padding-right: ceil(($gutter / 2));\n  @include clearfix;\n}\n\n// Creates a wrapper for a series of columns\n@mixin make-row($gutter: $grid-gutter-width) {\n  margin-left:  ceil(($gutter / -2));\n  margin-right: floor(($gutter / -2));\n  @include clearfix;\n}\n\n// Generate the extra small columns\n@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {\n  position: relative;\n  float: left;\n  width: percentage(($columns / $grid-columns));\n  min-height: 1px;\n  padding-left:  ($gutter / 2);\n  padding-right: ($gutter / 2);\n}\n@mixin make-xs-column-offset($columns) {\n  margin-left: percentage(($columns / $grid-columns));\n}\n@mixin make-xs-column-push($columns) {\n  left: percentage(($columns / $grid-columns));\n}\n@mixin make-xs-column-pull($columns) {\n  right: percentage(($columns / $grid-columns));\n}\n\n// Generate the small columns\n@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {\n  position: relative;\n  min-height: 1px;\n  padding-left:  ($gutter / 2);\n  padding-right: ($gutter / 2);\n\n  @media (min-width: $screen-sm-min) {\n    float: left;\n    width: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-sm-column-offset($columns) {\n  @media (min-width: $screen-sm-min) {\n    margin-left: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-sm-column-push($columns) {\n  @media (min-width: $screen-sm-min) {\n    left: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-sm-column-pull($columns) {\n  @media (min-width: $screen-sm-min) {\n    right: percentage(($columns / $grid-columns));\n  }\n}\n\n// Generate the medium columns\n@mixin make-md-column($columns, $gutter: $grid-gutter-width) {\n  position: relative;\n  min-height: 1px;\n  padding-left:  ($gutter / 2);\n  padding-right: ($gutter / 2);\n\n  @media (min-width: $screen-md-min) {\n    float: left;\n    width: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-md-column-offset($columns) {\n  @media (min-width: $screen-md-min) {\n    margin-left: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-md-column-push($columns) {\n  @media (min-width: $screen-md-min) {\n    left: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-md-column-pull($columns) {\n  @media (min-width: $screen-md-min) {\n    right: percentage(($columns / $grid-columns));\n  }\n}\n\n// Generate the large columns\n@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {\n  position: relative;\n  min-height: 1px;\n  padding-left:  ($gutter / 2);\n  padding-right: ($gutter / 2);\n\n  @media (min-width: $screen-lg-min) {\n    float: left;\n    width: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-lg-column-offset($columns) {\n  @media (min-width: $screen-lg-min) {\n    margin-left: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-lg-column-push($columns) {\n  @media (min-width: $screen-lg-min) {\n    left: percentage(($columns / $grid-columns));\n  }\n}\n@mixin make-lg-column-pull($columns) {\n  @media (min-width: $screen-lg-min) {\n    right: percentage(($columns / $grid-columns));\n  }\n}\n","//\n// Mixins\n// --------------------------------------------------\n// Bootstrap overrides and PatternFly-specific mixins\n\n// Bootstrap overrides\n// -------------------\n\n// Button variants\n@mixin button-variant($color, $background, $background-image-start, $background-image-stop, $border) {\n  background-color: $background;\n  @include gradient-vertical($background-image-start, $background-image-stop);\n  border-color: $border;\n  color: $color;\n\n  &:hover,\n  &:focus,\n  &:active,\n  &.active {\n    background-color: $background;\n    background-image: none;\n    border-color: $border;\n    color: $color;\n  }\n  .open & { &.dropdown-toggle {\n    background-color: $background;\n    background-image: none;\n    border-color: $border;\n    color: $color;\n  } }\n  &:active,\n  &.active {\n    background-image: none;\n    &:hover,\n    &:focus,\n    &.focus {\n      background-color: darken($background, 5%);\n          border-color: darken($border, 7%);\n    }\n  }\n  .open & { &.dropdown-toggle {\n    background-image: none;\n    &:hover,\n    &:focus,\n    &.focus {\n      background-color: darken($background, 5%);\n          border-color: darken($border, 7%);\n    }\n  } }\n  &.disabled,\n  &[disabled],\n  fieldset[disabled] & {\n    &,\n    &:hover,\n    &:focus,\n    &:active,\n    &.active {\n      background-color: $background;\n      border-color: $border;\n    }\n  }\n}\n\n// Form control outline\n@mixin form-control-outline($color: $input-border-focus) {\n  $color-rgba: rgba(red($color), green($color), blue($color), .6);\n  &:focus {\n    border-color: $color;\n    outline: 0 !important;\n    @include box-shadow(#{inset 0 1px 1px rgba(3, 3, 3, 0.075), 0 0 8px #{$color-rgba}});\n  }\n}\n\n// Gradients\n#gradient {\n  @mixin striped($color: rgba($color-pf-black, 0.15), $angle: -45deg) {\n    background-image: linear-gradient($angle, $color 25%, $color 26%, transparent 27%, transparent 49%, $color 50%, $color 51%, transparent 52%, transparent 74%, $color 75%, $color 76%, transparent 77%);\n  }\n}\n\n// Horizontal dividers\n@mixin nav-divider($color: $color-pf-black-200, $margin: 4px 1px) {\n  background-color: $color;\n  height: 1px;\n  margin: $margin;\n  overflow: hidden;\n}\n\n// Placeholder text\n@mixin placeholder($color: $input-color-placeholder) {\n  &::placeholder               { color: $color; }\n  &:-ms-input-placeholder      { color: $color; } // Internet Explorer 10+\n  &::-webkit-input-placeholder { color: $color; } // Safari and Chrome\n  &::-moz-placeholder {\n    color: $color;\n    opacity: 1; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526\n  }\n}\n\n// PatternFly-specific\n// -------------------\n\n@mixin tab-indicator($background: $gray-light-pf, $left: 15px, $right: 15px) {\n  &:before {\n    background: $background;\n    bottom: -1px;\n    content: \"\";\n    display: block;\n    height: 2px;\n    left: $left;\n    position: absolute;\n    right: $right;\n  }\n}\n","//\n// Mixins\n// --------------------------------------------------\n// Bootstrap overrides and PatternFly-specific mixins\n\n// Bootstrap overrides\n// -------------------\n\n\n\n// Form control outline\n@mixin form-control-outline($color: $input-border-focus) {\n  $color-rgba: rgba(red($color), green($color), blue($color), .6);\n  &:focus {\n    border-color: $color;\n    outline: 0 !important;\n    @include box-shadow(#{inset 0 1px 1px rgba(3, 3, 3, 0.075), 0 0 8px #{$color-rgba}});\n  }\n}\n\n\n@mixin gradient-striped($color: rgba($color-pf-black, 0.15), $angle: -45deg) {\n  background-image: linear-gradient($angle, $color 25%, $color 26%, transparent 27%, transparent 49%, $color 50%, $color 51%, transparent 52%, transparent 74%, $color 75%, $color 76%, transparent 77%);\n}\n\n// Horizontal dividers\n@mixin nav-divider($color: $color-pf-black-200, $margin: 4px 1px) {\n  background-color: $color;\n  height: 1px;\n  margin: $margin;\n  overflow: hidden;\n}\n\n// Placeholder text\n@mixin placeholder($color: $input-color-placeholder) {\n  &::placeholder               { color: $color; }\n  &:-ms-input-placeholder      { color: $color; } // Internet Explorer 10+\n  &::-webkit-input-placeholder { color: $color; } // Safari and Chrome\n  &::-moz-placeholder {\n    color: $color;\n    opacity: 1; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526\n  }\n}\n\n// PatternFly-specific\n// -------------------\n\n@mixin tab-indicator($background: $gray-light-pf, $left: 15px, $right: 15px) {\n  &:before {\n    background: $background;\n    bottom: -1px;\n    content: \"\";\n    display: block;\n    height: 2px;\n    left: $left;\n    position: absolute;\n    right: $right;\n  }\n}\n"],"names":[],"mappings":"AAGA,AAAA,6BAA6B,AAAC,CAC5B,QAAQ,CAAE,KAAK,CACf,GAAG,COEK,GAAgC,CPDxC,KAAK,COCG,SAAgC,CPAxC,OAAO,CAAE,EAAE,CACX,KAAK,CAAE,KAAK,CAOb,AAZD,AAME,6BAN2B,CAM3B,2BAA2B,AAAC,CAC1B,KAAK,CGNE,IAAI,CHUZ,AAXH,AAQmB,6BARU,CAM3B,2BAA2B,CAEzB,cAAc,CAAC,CAAC,AAAC,CACf,WAAW,CAAE,IAAI,CAClB"} */
