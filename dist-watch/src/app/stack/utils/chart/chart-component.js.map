{"version":3,"file":"chart-component.js","sourceRoot":"","sources":["../../../../../../src/app/stack/utils/chart/chart-component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport * as c3 from 'c3';\n// require('../../node_modules/c3/c3');\n\n/**\n * \n * This chart uses C3 for generating and rendering charts.\n * \n * Minimum Requirements:\n * C3, D3 (As C3 internally uses D3)\n *\n * Usage:\n * eg.) <f8-chart bind-data=\"dataFromTheComponentOrWherever\"></f8-chart>\n *\n * 1. MultiLine chart takes the parameters\n *      a. data of c3 configuration\n */\n@Component({\n    selector: 'f8-chart',\n    template: ``,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['data', 'chartOptions', 'configs'],\n    styles: [\n        `.ng2-c3 {\n            display:block; // This is required for proper positioning of tooltip\n        }\n        `\n    ]\n})\nexport class ChartComponent {\n\n    // All Inputs for this component declaration\n    private data: any; // Configuration for series to be used for generating C3 has to be here\n    private chartOptions: any;\n    // Includes all the configurations for the chart and also individual chart configurations\n    private element: HTMLElement; // Element to which the chart has to be attached to\n    private configs: any;\n\n    // Below configs have been captured from C3 Reference Doc's Need \n    // to be updated if in case c3 includes new options\n    private c3Configs: Array<string> = [\n                                        'axis',\n                                        'tooltip',\n                                        'grid',\n                                        'legend',\n                                        'zoom',\n                                        'regions',\n                                        'subchart'\n                                        ];\n\n    /**\n     *  Below options have been captured from C3 Reference Doc's \n     *  This doesnot include call back methods those options would be captured seperately\n     */\n    private c3Options: Array<string> = [\n                                        'size',\n                                        'padding',\n                                        'color',\n                                        'interaction',\n                                        'transition',\n                                        'point',\n                                        'line',\n                                        'area',\n                                        'bar',\n                                        'pie',\n                                        'donut',\n                                        'gauge',\n                                        'oninit',\n                                        'onrendered',\n                                        'onmouseover',\n                                        'onmouseout',\n                                        'onresize',\n                                        'onresized'\n                                        ];\n\n\n    constructor(elementReference: ElementRef) {\n        this.element = elementReference.nativeElement;\n        // Adding the below line to specify CSS for the ng2-c3 selector\n        this.element.className += ' ng2-c3';\n    }\n\n    // Checks for the changes made in the data and re-renders the charts accordingly\n    public ngOnChanges(): void {\n        try {\n            this.__render(this.data, this.chartOptions, this.configs);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    private __render(inputData: any, chartOptionsData: any, chartConfigsData: any): void {\n        let _this: ChartComponent = this;\n        if (this.isValid(inputData)) {\n\n            let c3InputData: any = {};\n\n            c3InputData['bindto'] = _this.element;\n            c3InputData['data'] = inputData;\n\n\n            /**\n             * Options for the charts provided\n             * Options listed like axis, tooltip, grid, legend, zoom , point\n             * Individual options are parsed and set in c3InputData Json\n             * to be provided to c3\n             */\n            if (this.isValid(chartConfigsData)) {\n                this.updateIfValidInput(chartConfigsData, c3InputData, this.c3Configs);\n            }\n\n            /*\n             * Chart Configuration could have multiple Options\n             * Size, padding, color Pattern, Transition\n             * Some callback initializers like OnInit, Onrendered, OnMouseOver, OnMouseOut\n             *  \n             */\n\n            if (this.isValid(chartOptionsData)) {\n                this.updateIfValidInput(chartOptionsData, c3InputData, this.c3Options);\n            }\n\n            /**\n             * Should find a way to check for proper inputs\n             * if(!this.isValidInput(c3InputData)) {\n             *     throw new Error('Invalid Configuration passed');\n             * }\n             * \n             */\n            c3.generate(c3InputData);\n            // Generates the C3 chart for the given configuration \n            // and places it inside the directive's element.\n        }\n\n    }\n\n    // A utility method to check if a provided value is valid\n    private isValid(randomInput: any): boolean {\n        return randomInput !== undefined && randomInput !== null;\n    }\n\n    /**\n     * A utility method to traverse through teh input map, checks with the given config \n     *  Updates the  output map if input is present in config\n     *  skips the field if the given input is not present in config map\n     *  \n     */\n    private updateIfValidInput(inputMap: any, outputMap: any, config: Array<string>) {\n        for (let key in inputMap) {\n            if (inputMap.hasOwnProperty(key)) {\n                let isValidOption = config.indexOf(key);\n                if (isValidOption >= 0) {\n                    outputMap[key] = inputMap[key];\n                }\n            }\n        }\n    }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}