{"version":3,"file":"table-filter.pipe.js","sourceRoot":"","sources":["../../../../../src/app/stack/utils/table-filter.pipe.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,IAAI,EAAiB,UAAU,EAAE,MAAM,eAAe,CAAC;AAqBhE,IAAa,WAAW;IAAxB;IAcA,CAAC;IAbU,+BAAS,GAAhB,UAAiB,KAAiB,EAAE,KAAa;QAC7C,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACT,MAAM,CAAC,EAAE,CAAC;QACd,CAAC;QAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QACD,EAAE,CAAC,CAAC,KAAK,KAAK,OAAO,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QACD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI;YACpB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC;QAChC,CAAC,CAAC,CAAC;IACP,CAAC;IACL,kBAAC;AAAD,CAAC,AAdD,IAcC;AAdY,WAAW;IAnBvB,IAAI,CAAC;QACF,IAAI,EAAE,QAAQ;KACjB,CAAC;IAEF;;;;;;;;;;;;OAYG;;IAEF,UAAU,EAAE;GACA,WAAW,CAcvB;SAdY,WAAW","sourcesContent":["import { Pipe, PipeTransform, Injectable } from '@angular/core';\n\n@Pipe({\n    name: 'filter'\n})\n\n/* \n *  A generic filter that gives you the filtered output\n *  on passing the key and value to be filtered upon\n *  Takes a key - fielname, and a value - fieldValue\n *  Returns the filtered Array of objects or anything\n * \n *  Name: 'filter'\n *  Usage: \n *  \n *  Use as a pipe,\n *  In a loop: \n *  *ngFor=\"let something of (manythings | filter : fieldNameAsVariable {or 'simply name'} : fieldValueAsVariable {or 'simply value'})\"\n */\n\n@Injectable()\nexport class TableFilter implements PipeTransform {\n    public transform(items: Array<any>, field: string): Array<any> {\n        if (!items) {\n            return [];\n        } if (!field) {\n            return items;\n        }\n        if (field === 'reset') {\n            return items;\n        }\n        return items.filter(item => {\n            return item[field] === true;\n        });\n    }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}