{"version":3,"file":"feedback.service.js","sourceRoot":"","sources":["../../../../../src/app/stack/feedback/feedback.service.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,cAAc,EAAG,MAAM,eAAe,CAAC;AACzE,OAAO,EAAE,qBAAqB,EAAE,MAAM,kBAAkB,CAAC;AACzD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,yBAAyB,CAAC;AACjC,OAAO,uBAAuB,CAAC;AAG/B,IAAa,eAAe;IAExB,yBACY,IAAU,EACV,IAA2B;QAD3B,SAAI,GAAJ,IAAI,CAAM;QACV,SAAI,GAAJ,IAAI,CAAuB;QAH/B,YAAO,GAAY,IAAI,OAAO,CAAC,EAAC,cAAc,EAAE,kBAAkB,EAAC,CAAC,CAAC;QAIrE,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QACxE,CAAC;IACL,CAAC;IAEE,gCAAM,GAAb,UAAc,QAAa;QACvB,IAAI,GAAG,GAAW,2DAA2D,CAAC;QAC9E,IAAI,OAAO,GAAmB,IAAI,cAAc,CAAC;YAC7C,OAAO,EAAE,IAAI,CAAC,OAAO;SACxB,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI;aACX,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC;aAC5C,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAEO,qCAAW,GAAnB,UAAoB,GAAa;QAC7B,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;IACtB,CAAC;IAEO,qCAAW,GAAnB,UAAoB,KAAqB;QACrC,oEAAoE;QACpE,IAAI,MAAc,CAAC;QACnB,EAAE,CAAC,CAAC,KAAK,YAAY,QAAQ,CAAC,CAAC,CAAC;YAChC,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;YAChC,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAC/C,MAAM,GAAM,KAAK,CAAC,MAAM,YAAM,KAAK,CAAC,UAAU,IAAI,EAAE,UAAI,GAAK,CAAC;QAC9D,CAAC;QAAC,IAAI,CAAC,CAAC;YACR,MAAM,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC1D,CAAC;QACD,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACtB,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IACL,sBAAC;AAAD,CAAC,AAxCD,IAwCC;AAxCY,eAAe;IAD3B,UAAU,EAAE;qCAIS,IAAI;QACJ,qBAAqB;GAJ9B,eAAe,CAwC3B;SAxCY,eAAe","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions  } from '@angular/http';\nimport { AuthenticationService } from 'ngx-login-client';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/map';\n\n@Injectable()\nexport class FeedbackService {\n    private headers: Headers = new Headers({'Content-Type': 'application/json'});\n    constructor(\n        private http: Http,\n        private auth: AuthenticationService) {\n            if (this.auth.getToken() !== null) {\n                this.headers.set('Authorization', 'Bearer ' + this.auth.getToken());\n            }\n        }\n\n    public submit(feedback: any): Observable<any> {\n        let url: string = 'https://recommender.api.openshift.io/api/v1/user-feedback';\n        let options: RequestOptions = new RequestOptions({\n            headers: this.headers\n        });\n\n        return this.http\n            .post(url, JSON.stringify(feedback), options)\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n\n    private extractData(res: Response) {\n        let body = res.json();\n        return body || {};\n    }\n\n    private handleError(error: Response | any) {\n        // In a real world app, we might use a remote logging infrastructure\n        let errMsg: string;\n        if (error instanceof Response) {\n        const body = error.json() || '';\n        const err = body.error || JSON.stringify(body);\n        errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n        } else {\n        errMsg = error.message ? error.message : error.toString();\n        }\n        console.error(errMsg);\n        return Observable.throw(errMsg);\n    }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}